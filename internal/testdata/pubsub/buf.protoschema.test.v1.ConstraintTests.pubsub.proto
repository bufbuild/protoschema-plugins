syntax = "proto2";
message ConstraintTests {
  repeated Inline_buf_protoschema_test_v1_ConstraintTest test_cases = 1;
  message Inline_buf_protoschema_test_v1_ConstraintTest {
    oneof test_case {
      RequiredImplicit required_implicit = 1;
      RequiredOptional required_optional = 2;
      bool const_bool = 3;
      string const_string = 4;
      string len_string = 5;
      string min_len_string = 6;
      string max_len_string = 7;
      string min_max_len_string = 8;
      string in_string = 9;
      string pattern_string = 10;
      string prefix_string = 11;
      string suffix_string = 12;
      string contains_string = 13;
      string prefix_suffix_string = 14;
      string prefix_contains_suffix_string = 15;
      string hostname_string = 16;
      string email_string = 17;
      string ip_string = 18;
      string ipv4_string = 19;
      string ipv6_string = 20;
      string uri_string = 21;
      string uri_ref_string = 22;
      string address_string = 23;
      string uuid_string = 24;
      string tuuid_string = 25;
      string ip_with_prefixlen_string = 26;
      string ipv4_with_prefixlen_string = 27;
      string ipv6_with_prefixlen_string = 28;
      string ip_prefix_string = 29;
      string ipv4_prefix_string = 30;
      string ipv6_prefix_string = 31;
      string host_and_port_string = 32;
      string http_header_name_strict_string = 33;
      bytes len_bytes = 34;
      bytes min_len_bytes = 35;
      bytes max_len_bytes = 36;
      bytes min_max_len_bytes = 37;
      int32 const_int32 = 38;
      int32 lt_int32 = 39;
      int32 lte_int32 = 40;
      int32 gt_int32 = 41;
      int32 gte_int32 = 42;
      int32 in_int32 = 43;
      int32 lt_gt_int32 = 114;
      int64 const_int64 = 44;
      int64 lt_int64 = 45;
      int64 lte_int64 = 46;
      int64 gt_int64 = 47;
      int64 gte_int64 = 48;
      int64 in_int64 = 49;
      int64 lt_gt_int64 = 115;
      uint32 const_uint32 = 50;
      uint32 lt_uint32 = 51;
      uint32 lte_uint32 = 52;
      uint32 gt_uint32 = 53;
      uint32 gte_uint32 = 54;
      uint32 in_uint32 = 55;
      uint32 lt_gt_uint32 = 116;
      uint64 const_uint64 = 56;
      uint64 lt_uint64 = 57;
      uint64 lte_uint64 = 58;
      uint64 gt_uint64 = 59;
      uint64 gte_uint64 = 60;
      uint64 in_uint64 = 61;
      uint64 lt_gt_uint64 = 117;
      sint32 const_sint32 = 62;
      sint32 lt_sint32 = 63;
      sint32 lte_sint32 = 64;
      sint32 gt_sint32 = 65;
      sint32 gte_sint32 = 66;
      sint32 in_sint32 = 67;
      sint64 const_sint64 = 68;
      sint64 lt_sint64 = 69;
      sint64 lte_sint64 = 70;
      sint64 gt_sint64 = 71;
      sint64 gte_sint64 = 72;
      sint64 in_sint64 = 73;
      sfixed32 const_sfixed32 = 74;
      sfixed32 lt_sfixed32 = 75;
      sfixed32 lte_sfixed32 = 76;
      sfixed32 gt_sfixed32 = 77;
      sfixed32 gte_sfixed32 = 78;
      sfixed32 in_sfixed32 = 79;
      sfixed64 const_sfixed64 = 80;
      sfixed64 lt_sfixed64 = 81;
      sfixed64 lte_sfixed64 = 82;
      sfixed64 gt_sfixed64 = 83;
      sfixed64 gte_sfixed64 = 84;
      sfixed64 in_sfixed64 = 85;
    }
    optional fixed32 const_fixed32 = 86;
    optional fixed32 lt_fixed32 = 87;
    optional fixed32 lte_fixed32 = 88;
    optional fixed32 gt_fixed32 = 89;
    optional fixed32 gte_fixed32 = 90;
    optional fixed32 in_fixed32 = 91;
    optional fixed64 const_fixed64 = 92;
    optional fixed64 lt_fixed64 = 93;
    optional fixed64 lte_fixed64 = 94;
    optional fixed64 gt_fixed64 = 95;
    optional fixed64 gte_fixed64 = 96;
    optional fixed64 in_fixed64 = 97;
    optional double const_double = 98;
    optional double lt_double = 99;
    optional double lte_double = 100;
    optional double gt_double = 101;
    optional double gte_double = 102;
    optional double in_double = 103;
    optional double finite_double = 104;
    optional double lt_gt_double = 105;
    optional float const_float = 106;
    optional float lt_float = 107;
    optional float lte_float = 108;
    optional float gt_float = 109;
    optional float gte_float = 110;
    optional float in_float = 111;
    optional float finite_float = 112;
    optional float lt_gt_float = 113;
    map<string, string> in_map = 118;
    message RequiredImplicit {
      optional bool bool_value = 1;
      optional string string_value = 2;
    }
    message RequiredOptional {
      optional bool bool_value = 1;
      optional string string_value = 2;
    }
  }
}
