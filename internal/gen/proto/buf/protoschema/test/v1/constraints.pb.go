// Copyright 2024-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: buf/protoschema/test/v1/constraints.proto

package testv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConstraintTest_Enum int32

const (
	ConstraintTest_ENUM_UNSPECIFIED ConstraintTest_Enum = 0
	ConstraintTest_ENUM_VAL1        ConstraintTest_Enum = 1
	ConstraintTest_ENUM_VAL2        ConstraintTest_Enum = 2
	ConstraintTest_ENUM_VAL7        ConstraintTest_Enum = 7
)

// Enum value maps for ConstraintTest_Enum.
var (
	ConstraintTest_Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_VAL1",
		2: "ENUM_VAL2",
		7: "ENUM_VAL7",
	}
	ConstraintTest_Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_VAL1":        1,
		"ENUM_VAL2":        2,
		"ENUM_VAL7":        7,
	}
)

func (x ConstraintTest_Enum) Enum() *ConstraintTest_Enum {
	p := new(ConstraintTest_Enum)
	*p = x
	return p
}

func (x ConstraintTest_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintTest_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_buf_protoschema_test_v1_constraints_proto_enumTypes[0].Descriptor()
}

func (ConstraintTest_Enum) Type() protoreflect.EnumType {
	return &file_buf_protoschema_test_v1_constraints_proto_enumTypes[0]
}

func (x ConstraintTest_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintTest_Enum.Descriptor instead.
func (ConstraintTest_Enum) EnumDescriptor() ([]byte, []int) {
	return file_buf_protoschema_test_v1_constraints_proto_rawDescGZIP(), []int{0, 0}
}

type ConstraintTest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TestCase:
	//
	//	*ConstraintTest_RequiredImplicit_
	//	*ConstraintTest_RequiredOptional_
	//	*ConstraintTest_ConstBool
	//	*ConstraintTest_ConstEnum
	//	*ConstraintTest_DefinedOnlyEnum
	//	*ConstraintTest_InEnum
	//	*ConstraintTest_NotInEnum
	//	*ConstraintTest_DefinedOnlyNotInEnum
	//	*ConstraintTest_InAndNotInEnum
	//	*ConstraintTest_ConstString
	//	*ConstraintTest_LenString
	//	*ConstraintTest_MinLenString
	//	*ConstraintTest_MaxLenString
	//	*ConstraintTest_MinMaxLenString
	//	*ConstraintTest_InString
	//	*ConstraintTest_PatternString
	//	*ConstraintTest_PrefixString
	//	*ConstraintTest_SuffixString
	//	*ConstraintTest_ContainsString
	//	*ConstraintTest_PrefixSuffixString
	//	*ConstraintTest_PrefixContainsSuffixString
	//	*ConstraintTest_HostnameString
	//	*ConstraintTest_EmailString
	//	*ConstraintTest_IpString
	//	*ConstraintTest_Ipv4String
	//	*ConstraintTest_Ipv6String
	//	*ConstraintTest_UriString
	//	*ConstraintTest_UriRefString
	//	*ConstraintTest_AddressString
	//	*ConstraintTest_UuidString
	//	*ConstraintTest_TuuidString
	//	*ConstraintTest_IpWithPrefixlenString
	//	*ConstraintTest_Ipv4WithPrefixlenString
	//	*ConstraintTest_Ipv6WithPrefixlenString
	//	*ConstraintTest_IpPrefixString
	//	*ConstraintTest_Ipv4PrefixString
	//	*ConstraintTest_Ipv6PrefixString
	//	*ConstraintTest_HostAndPortString
	//	*ConstraintTest_HttpHeaderNameStrictString
	//	*ConstraintTest_LenBytes
	//	*ConstraintTest_MinLenBytes
	//	*ConstraintTest_MaxLenBytes
	//	*ConstraintTest_MinMaxLenBytes
	//	*ConstraintTest_ConstInt32
	//	*ConstraintTest_LtInt32
	//	*ConstraintTest_LteInt32
	//	*ConstraintTest_GtInt32
	//	*ConstraintTest_GteInt32
	//	*ConstraintTest_InInt32
	//	*ConstraintTest_LtGtInt32
	//	*ConstraintTest_ConstInt64
	//	*ConstraintTest_LtInt64
	//	*ConstraintTest_LteInt64
	//	*ConstraintTest_GtInt64
	//	*ConstraintTest_GteInt64
	//	*ConstraintTest_InInt64
	//	*ConstraintTest_LtGtInt64
	//	*ConstraintTest_ConstUint32
	//	*ConstraintTest_LtUint32
	//	*ConstraintTest_LteUint32
	//	*ConstraintTest_GtUint32
	//	*ConstraintTest_GteUint32
	//	*ConstraintTest_InUint32
	//	*ConstraintTest_LtGtUint32
	//	*ConstraintTest_ConstUint64
	//	*ConstraintTest_LtUint64
	//	*ConstraintTest_LteUint64
	//	*ConstraintTest_GtUint64
	//	*ConstraintTest_GteUint64
	//	*ConstraintTest_InUint64
	//	*ConstraintTest_LtGtUint64
	//	*ConstraintTest_ConstSint32
	//	*ConstraintTest_LtSint32
	//	*ConstraintTest_LteSint32
	//	*ConstraintTest_GtSint32
	//	*ConstraintTest_GteSint32
	//	*ConstraintTest_InSint32
	//	*ConstraintTest_ConstSint64
	//	*ConstraintTest_LtSint64
	//	*ConstraintTest_LteSint64
	//	*ConstraintTest_GtSint64
	//	*ConstraintTest_GteSint64
	//	*ConstraintTest_InSint64
	//	*ConstraintTest_ConstSfixed32
	//	*ConstraintTest_LtSfixed32
	//	*ConstraintTest_LteSfixed32
	//	*ConstraintTest_GtSfixed32
	//	*ConstraintTest_GteSfixed32
	//	*ConstraintTest_InSfixed32
	//	*ConstraintTest_ConstSfixed64
	//	*ConstraintTest_LtSfixed64
	//	*ConstraintTest_LteSfixed64
	//	*ConstraintTest_GtSfixed64
	//	*ConstraintTest_GteSfixed64
	//	*ConstraintTest_InSfixed64
	TestCase      isConstraintTest_TestCase `protobuf_oneof:"test_case"`
	ConstFixed32  uint32                    `protobuf:"fixed32,86,opt,name=const_fixed32,json=constFixed32,proto3" json:"const_fixed32,omitempty"`
	LtFixed32     uint32                    `protobuf:"fixed32,87,opt,name=lt_fixed32,json=ltFixed32,proto3" json:"lt_fixed32,omitempty"`
	LteFixed32    uint32                    `protobuf:"fixed32,88,opt,name=lte_fixed32,json=lteFixed32,proto3" json:"lte_fixed32,omitempty"`
	GtFixed32     uint32                    `protobuf:"fixed32,89,opt,name=gt_fixed32,json=gtFixed32,proto3" json:"gt_fixed32,omitempty"`
	GteFixed32    uint32                    `protobuf:"fixed32,90,opt,name=gte_fixed32,json=gteFixed32,proto3" json:"gte_fixed32,omitempty"`
	InFixed32     uint32                    `protobuf:"fixed32,91,opt,name=in_fixed32,json=inFixed32,proto3" json:"in_fixed32,omitempty"`
	ConstFixed64  uint64                    `protobuf:"fixed64,92,opt,name=const_fixed64,json=constFixed64,proto3" json:"const_fixed64,omitempty"`
	LtFixed64     uint64                    `protobuf:"fixed64,93,opt,name=lt_fixed64,json=ltFixed64,proto3" json:"lt_fixed64,omitempty"`
	LteFixed64    uint64                    `protobuf:"fixed64,94,opt,name=lte_fixed64,json=lteFixed64,proto3" json:"lte_fixed64,omitempty"`
	GtFixed64     uint64                    `protobuf:"fixed64,95,opt,name=gt_fixed64,json=gtFixed64,proto3" json:"gt_fixed64,omitempty"`
	GteFixed64    uint64                    `protobuf:"fixed64,96,opt,name=gte_fixed64,json=gteFixed64,proto3" json:"gte_fixed64,omitempty"`
	InFixed64     uint64                    `protobuf:"fixed64,97,opt,name=in_fixed64,json=inFixed64,proto3" json:"in_fixed64,omitempty"`
	ConstDouble   float64                   `protobuf:"fixed64,98,opt,name=const_double,json=constDouble,proto3" json:"const_double,omitempty"`
	LtDouble      float64                   `protobuf:"fixed64,99,opt,name=lt_double,json=ltDouble,proto3" json:"lt_double,omitempty"`
	LteDouble     float64                   `protobuf:"fixed64,100,opt,name=lte_double,json=lteDouble,proto3" json:"lte_double,omitempty"`
	GtDouble      float64                   `protobuf:"fixed64,101,opt,name=gt_double,json=gtDouble,proto3" json:"gt_double,omitempty"`
	GteDouble     float64                   `protobuf:"fixed64,102,opt,name=gte_double,json=gteDouble,proto3" json:"gte_double,omitempty"`
	InDouble      float64                   `protobuf:"fixed64,103,opt,name=in_double,json=inDouble,proto3" json:"in_double,omitempty"`
	FiniteDouble  float64                   `protobuf:"fixed64,104,opt,name=finite_double,json=finiteDouble,proto3" json:"finite_double,omitempty"`
	LtGtDouble    float64                   `protobuf:"fixed64,105,opt,name=lt_gt_double,json=ltGtDouble,proto3" json:"lt_gt_double,omitempty"`
	ConstFloat    float32                   `protobuf:"fixed32,106,opt,name=const_float,json=constFloat,proto3" json:"const_float,omitempty"`
	LtFloat       float32                   `protobuf:"fixed32,107,opt,name=lt_float,json=ltFloat,proto3" json:"lt_float,omitempty"`
	LteFloat      float32                   `protobuf:"fixed32,108,opt,name=lte_float,json=lteFloat,proto3" json:"lte_float,omitempty"`
	GtFloat       float32                   `protobuf:"fixed32,109,opt,name=gt_float,json=gtFloat,proto3" json:"gt_float,omitempty"`
	GteFloat      float32                   `protobuf:"fixed32,110,opt,name=gte_float,json=gteFloat,proto3" json:"gte_float,omitempty"`
	InFloat       float32                   `protobuf:"fixed32,111,opt,name=in_float,json=inFloat,proto3" json:"in_float,omitempty"`
	FiniteFloat   float32                   `protobuf:"fixed32,112,opt,name=finite_float,json=finiteFloat,proto3" json:"finite_float,omitempty"`
	LtGtFloat     float32                   `protobuf:"fixed32,113,opt,name=lt_gt_float,json=ltGtFloat,proto3" json:"lt_gt_float,omitempty"`
	InMap         map[string]string         `protobuf:"bytes,118,rep,name=in_map,json=inMap,proto3" json:"in_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstraintTest) Reset() {
	*x = ConstraintTest{}
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstraintTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintTest) ProtoMessage() {}

func (x *ConstraintTest) ProtoReflect() protoreflect.Message {
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintTest.ProtoReflect.Descriptor instead.
func (*ConstraintTest) Descriptor() ([]byte, []int) {
	return file_buf_protoschema_test_v1_constraints_proto_rawDescGZIP(), []int{0}
}

func (x *ConstraintTest) GetTestCase() isConstraintTest_TestCase {
	if x != nil {
		return x.TestCase
	}
	return nil
}

func (x *ConstraintTest) GetRequiredImplicit() *ConstraintTest_RequiredImplicit {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_RequiredImplicit_); ok {
			return x.RequiredImplicit
		}
	}
	return nil
}

func (x *ConstraintTest) GetRequiredOptional() *ConstraintTest_RequiredOptional {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_RequiredOptional_); ok {
			return x.RequiredOptional
		}
	}
	return nil
}

func (x *ConstraintTest) GetConstBool() bool {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstBool); ok {
			return x.ConstBool
		}
	}
	return false
}

func (x *ConstraintTest) GetConstEnum() ConstraintTest_Enum {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstEnum); ok {
			return x.ConstEnum
		}
	}
	return ConstraintTest_ENUM_UNSPECIFIED
}

func (x *ConstraintTest) GetDefinedOnlyEnum() ConstraintTest_Enum {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_DefinedOnlyEnum); ok {
			return x.DefinedOnlyEnum
		}
	}
	return ConstraintTest_ENUM_UNSPECIFIED
}

func (x *ConstraintTest) GetInEnum() ConstraintTest_Enum {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InEnum); ok {
			return x.InEnum
		}
	}
	return ConstraintTest_ENUM_UNSPECIFIED
}

func (x *ConstraintTest) GetNotInEnum() ConstraintTest_Enum {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_NotInEnum); ok {
			return x.NotInEnum
		}
	}
	return ConstraintTest_ENUM_UNSPECIFIED
}

func (x *ConstraintTest) GetDefinedOnlyNotInEnum() ConstraintTest_Enum {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_DefinedOnlyNotInEnum); ok {
			return x.DefinedOnlyNotInEnum
		}
	}
	return ConstraintTest_ENUM_UNSPECIFIED
}

func (x *ConstraintTest) GetInAndNotInEnum() ConstraintTest_Enum {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InAndNotInEnum); ok {
			return x.InAndNotInEnum
		}
	}
	return ConstraintTest_ENUM_UNSPECIFIED
}

func (x *ConstraintTest) GetConstString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstString); ok {
			return x.ConstString
		}
	}
	return ""
}

func (x *ConstraintTest) GetLenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LenString); ok {
			return x.LenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetMinLenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MinLenString); ok {
			return x.MinLenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetMaxLenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MaxLenString); ok {
			return x.MaxLenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetMinMaxLenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MinMaxLenString); ok {
			return x.MinMaxLenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetInString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InString); ok {
			return x.InString
		}
	}
	return ""
}

func (x *ConstraintTest) GetPatternString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_PatternString); ok {
			return x.PatternString
		}
	}
	return ""
}

func (x *ConstraintTest) GetPrefixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_PrefixString); ok {
			return x.PrefixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetSuffixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_SuffixString); ok {
			return x.SuffixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetContainsString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ContainsString); ok {
			return x.ContainsString
		}
	}
	return ""
}

func (x *ConstraintTest) GetPrefixSuffixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_PrefixSuffixString); ok {
			return x.PrefixSuffixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetPrefixContainsSuffixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_PrefixContainsSuffixString); ok {
			return x.PrefixContainsSuffixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetHostnameString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_HostnameString); ok {
			return x.HostnameString
		}
	}
	return ""
}

func (x *ConstraintTest) GetEmailString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_EmailString); ok {
			return x.EmailString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_IpString); ok {
			return x.IpString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv4String() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv4String); ok {
			return x.Ipv4String
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv6String() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv6String); ok {
			return x.Ipv6String
		}
	}
	return ""
}

func (x *ConstraintTest) GetUriString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_UriString); ok {
			return x.UriString
		}
	}
	return ""
}

func (x *ConstraintTest) GetUriRefString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_UriRefString); ok {
			return x.UriRefString
		}
	}
	return ""
}

func (x *ConstraintTest) GetAddressString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_AddressString); ok {
			return x.AddressString
		}
	}
	return ""
}

func (x *ConstraintTest) GetUuidString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_UuidString); ok {
			return x.UuidString
		}
	}
	return ""
}

func (x *ConstraintTest) GetTuuidString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_TuuidString); ok {
			return x.TuuidString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpWithPrefixlenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_IpWithPrefixlenString); ok {
			return x.IpWithPrefixlenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv4WithPrefixlenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv4WithPrefixlenString); ok {
			return x.Ipv4WithPrefixlenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv6WithPrefixlenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv6WithPrefixlenString); ok {
			return x.Ipv6WithPrefixlenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpPrefixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_IpPrefixString); ok {
			return x.IpPrefixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv4PrefixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv4PrefixString); ok {
			return x.Ipv4PrefixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv6PrefixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv6PrefixString); ok {
			return x.Ipv6PrefixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetHostAndPortString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_HostAndPortString); ok {
			return x.HostAndPortString
		}
	}
	return ""
}

func (x *ConstraintTest) GetHttpHeaderNameStrictString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_HttpHeaderNameStrictString); ok {
			return x.HttpHeaderNameStrictString
		}
	}
	return ""
}

func (x *ConstraintTest) GetLenBytes() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LenBytes); ok {
			return x.LenBytes
		}
	}
	return nil
}

func (x *ConstraintTest) GetMinLenBytes() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MinLenBytes); ok {
			return x.MinLenBytes
		}
	}
	return nil
}

func (x *ConstraintTest) GetMaxLenBytes() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MaxLenBytes); ok {
			return x.MaxLenBytes
		}
	}
	return nil
}

func (x *ConstraintTest) GetMinMaxLenBytes() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MinMaxLenBytes); ok {
			return x.MinMaxLenBytes
		}
	}
	return nil
}

func (x *ConstraintTest) GetConstInt32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstInt32); ok {
			return x.ConstInt32
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtInt32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtInt32); ok {
			return x.LtInt32
		}
	}
	return 0
}

func (x *ConstraintTest) GetLteInt32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LteInt32); ok {
			return x.LteInt32
		}
	}
	return 0
}

func (x *ConstraintTest) GetGtInt32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GtInt32); ok {
			return x.GtInt32
		}
	}
	return 0
}

func (x *ConstraintTest) GetGteInt32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GteInt32); ok {
			return x.GteInt32
		}
	}
	return 0
}

func (x *ConstraintTest) GetInInt32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InInt32); ok {
			return x.InInt32
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtGtInt32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtGtInt32); ok {
			return x.LtGtInt32
		}
	}
	return 0
}

func (x *ConstraintTest) GetConstInt64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstInt64); ok {
			return x.ConstInt64
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtInt64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtInt64); ok {
			return x.LtInt64
		}
	}
	return 0
}

func (x *ConstraintTest) GetLteInt64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LteInt64); ok {
			return x.LteInt64
		}
	}
	return 0
}

func (x *ConstraintTest) GetGtInt64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GtInt64); ok {
			return x.GtInt64
		}
	}
	return 0
}

func (x *ConstraintTest) GetGteInt64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GteInt64); ok {
			return x.GteInt64
		}
	}
	return 0
}

func (x *ConstraintTest) GetInInt64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InInt64); ok {
			return x.InInt64
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtGtInt64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtGtInt64); ok {
			return x.LtGtInt64
		}
	}
	return 0
}

func (x *ConstraintTest) GetConstUint32() uint32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstUint32); ok {
			return x.ConstUint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtUint32() uint32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtUint32); ok {
			return x.LtUint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetLteUint32() uint32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LteUint32); ok {
			return x.LteUint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetGtUint32() uint32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GtUint32); ok {
			return x.GtUint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetGteUint32() uint32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GteUint32); ok {
			return x.GteUint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetInUint32() uint32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InUint32); ok {
			return x.InUint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtGtUint32() uint32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtGtUint32); ok {
			return x.LtGtUint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetConstUint64() uint64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstUint64); ok {
			return x.ConstUint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtUint64() uint64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtUint64); ok {
			return x.LtUint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetLteUint64() uint64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LteUint64); ok {
			return x.LteUint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetGtUint64() uint64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GtUint64); ok {
			return x.GtUint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetGteUint64() uint64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GteUint64); ok {
			return x.GteUint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetInUint64() uint64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InUint64); ok {
			return x.InUint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtGtUint64() uint64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtGtUint64); ok {
			return x.LtGtUint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetConstSint32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstSint32); ok {
			return x.ConstSint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtSint32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtSint32); ok {
			return x.LtSint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetLteSint32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LteSint32); ok {
			return x.LteSint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetGtSint32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GtSint32); ok {
			return x.GtSint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetGteSint32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GteSint32); ok {
			return x.GteSint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetInSint32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InSint32); ok {
			return x.InSint32
		}
	}
	return 0
}

func (x *ConstraintTest) GetConstSint64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstSint64); ok {
			return x.ConstSint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtSint64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtSint64); ok {
			return x.LtSint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetLteSint64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LteSint64); ok {
			return x.LteSint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetGtSint64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GtSint64); ok {
			return x.GtSint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetGteSint64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GteSint64); ok {
			return x.GteSint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetInSint64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InSint64); ok {
			return x.InSint64
		}
	}
	return 0
}

func (x *ConstraintTest) GetConstSfixed32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstSfixed32); ok {
			return x.ConstSfixed32
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtSfixed32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtSfixed32); ok {
			return x.LtSfixed32
		}
	}
	return 0
}

func (x *ConstraintTest) GetLteSfixed32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LteSfixed32); ok {
			return x.LteSfixed32
		}
	}
	return 0
}

func (x *ConstraintTest) GetGtSfixed32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GtSfixed32); ok {
			return x.GtSfixed32
		}
	}
	return 0
}

func (x *ConstraintTest) GetGteSfixed32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GteSfixed32); ok {
			return x.GteSfixed32
		}
	}
	return 0
}

func (x *ConstraintTest) GetInSfixed32() int32 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InSfixed32); ok {
			return x.InSfixed32
		}
	}
	return 0
}

func (x *ConstraintTest) GetConstSfixed64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstSfixed64); ok {
			return x.ConstSfixed64
		}
	}
	return 0
}

func (x *ConstraintTest) GetLtSfixed64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LtSfixed64); ok {
			return x.LtSfixed64
		}
	}
	return 0
}

func (x *ConstraintTest) GetLteSfixed64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LteSfixed64); ok {
			return x.LteSfixed64
		}
	}
	return 0
}

func (x *ConstraintTest) GetGtSfixed64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GtSfixed64); ok {
			return x.GtSfixed64
		}
	}
	return 0
}

func (x *ConstraintTest) GetGteSfixed64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_GteSfixed64); ok {
			return x.GteSfixed64
		}
	}
	return 0
}

func (x *ConstraintTest) GetInSfixed64() int64 {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InSfixed64); ok {
			return x.InSfixed64
		}
	}
	return 0
}

func (x *ConstraintTest) GetConstFixed32() uint32 {
	if x != nil {
		return x.ConstFixed32
	}
	return 0
}

func (x *ConstraintTest) GetLtFixed32() uint32 {
	if x != nil {
		return x.LtFixed32
	}
	return 0
}

func (x *ConstraintTest) GetLteFixed32() uint32 {
	if x != nil {
		return x.LteFixed32
	}
	return 0
}

func (x *ConstraintTest) GetGtFixed32() uint32 {
	if x != nil {
		return x.GtFixed32
	}
	return 0
}

func (x *ConstraintTest) GetGteFixed32() uint32 {
	if x != nil {
		return x.GteFixed32
	}
	return 0
}

func (x *ConstraintTest) GetInFixed32() uint32 {
	if x != nil {
		return x.InFixed32
	}
	return 0
}

func (x *ConstraintTest) GetConstFixed64() uint64 {
	if x != nil {
		return x.ConstFixed64
	}
	return 0
}

func (x *ConstraintTest) GetLtFixed64() uint64 {
	if x != nil {
		return x.LtFixed64
	}
	return 0
}

func (x *ConstraintTest) GetLteFixed64() uint64 {
	if x != nil {
		return x.LteFixed64
	}
	return 0
}

func (x *ConstraintTest) GetGtFixed64() uint64 {
	if x != nil {
		return x.GtFixed64
	}
	return 0
}

func (x *ConstraintTest) GetGteFixed64() uint64 {
	if x != nil {
		return x.GteFixed64
	}
	return 0
}

func (x *ConstraintTest) GetInFixed64() uint64 {
	if x != nil {
		return x.InFixed64
	}
	return 0
}

func (x *ConstraintTest) GetConstDouble() float64 {
	if x != nil {
		return x.ConstDouble
	}
	return 0
}

func (x *ConstraintTest) GetLtDouble() float64 {
	if x != nil {
		return x.LtDouble
	}
	return 0
}

func (x *ConstraintTest) GetLteDouble() float64 {
	if x != nil {
		return x.LteDouble
	}
	return 0
}

func (x *ConstraintTest) GetGtDouble() float64 {
	if x != nil {
		return x.GtDouble
	}
	return 0
}

func (x *ConstraintTest) GetGteDouble() float64 {
	if x != nil {
		return x.GteDouble
	}
	return 0
}

func (x *ConstraintTest) GetInDouble() float64 {
	if x != nil {
		return x.InDouble
	}
	return 0
}

func (x *ConstraintTest) GetFiniteDouble() float64 {
	if x != nil {
		return x.FiniteDouble
	}
	return 0
}

func (x *ConstraintTest) GetLtGtDouble() float64 {
	if x != nil {
		return x.LtGtDouble
	}
	return 0
}

func (x *ConstraintTest) GetConstFloat() float32 {
	if x != nil {
		return x.ConstFloat
	}
	return 0
}

func (x *ConstraintTest) GetLtFloat() float32 {
	if x != nil {
		return x.LtFloat
	}
	return 0
}

func (x *ConstraintTest) GetLteFloat() float32 {
	if x != nil {
		return x.LteFloat
	}
	return 0
}

func (x *ConstraintTest) GetGtFloat() float32 {
	if x != nil {
		return x.GtFloat
	}
	return 0
}

func (x *ConstraintTest) GetGteFloat() float32 {
	if x != nil {
		return x.GteFloat
	}
	return 0
}

func (x *ConstraintTest) GetInFloat() float32 {
	if x != nil {
		return x.InFloat
	}
	return 0
}

func (x *ConstraintTest) GetFiniteFloat() float32 {
	if x != nil {
		return x.FiniteFloat
	}
	return 0
}

func (x *ConstraintTest) GetLtGtFloat() float32 {
	if x != nil {
		return x.LtGtFloat
	}
	return 0
}

func (x *ConstraintTest) GetInMap() map[string]string {
	if x != nil {
		return x.InMap
	}
	return nil
}

type isConstraintTest_TestCase interface {
	isConstraintTest_TestCase()
}

type ConstraintTest_RequiredImplicit_ struct {
	RequiredImplicit *ConstraintTest_RequiredImplicit `protobuf:"bytes,1,opt,name=required_implicit,json=requiredImplicit,proto3,oneof"`
}

type ConstraintTest_RequiredOptional_ struct {
	RequiredOptional *ConstraintTest_RequiredOptional `protobuf:"bytes,2,opt,name=required_optional,json=requiredOptional,proto3,oneof"`
}

type ConstraintTest_ConstBool struct {
	ConstBool bool `protobuf:"varint,3,opt,name=const_bool,json=constBool,proto3,oneof"`
}

type ConstraintTest_ConstEnum struct {
	ConstEnum ConstraintTest_Enum `protobuf:"varint,119,opt,name=const_enum,json=constEnum,proto3,enum=buf.protoschema.test.v1.ConstraintTest_Enum,oneof"`
}

type ConstraintTest_DefinedOnlyEnum struct {
	DefinedOnlyEnum ConstraintTest_Enum `protobuf:"varint,120,opt,name=defined_only_enum,json=definedOnlyEnum,proto3,enum=buf.protoschema.test.v1.ConstraintTest_Enum,oneof"`
}

type ConstraintTest_InEnum struct {
	InEnum ConstraintTest_Enum `protobuf:"varint,121,opt,name=in_enum,json=inEnum,proto3,enum=buf.protoschema.test.v1.ConstraintTest_Enum,oneof"`
}

type ConstraintTest_NotInEnum struct {
	NotInEnum ConstraintTest_Enum `protobuf:"varint,122,opt,name=not_in_enum,json=notInEnum,proto3,enum=buf.protoschema.test.v1.ConstraintTest_Enum,oneof"`
}

type ConstraintTest_DefinedOnlyNotInEnum struct {
	DefinedOnlyNotInEnum ConstraintTest_Enum `protobuf:"varint,123,opt,name=defined_only_not_in_enum,json=definedOnlyNotInEnum,proto3,enum=buf.protoschema.test.v1.ConstraintTest_Enum,oneof"`
}

type ConstraintTest_InAndNotInEnum struct {
	InAndNotInEnum ConstraintTest_Enum `protobuf:"varint,124,opt,name=in_and_not_in_enum,json=inAndNotInEnum,proto3,enum=buf.protoschema.test.v1.ConstraintTest_Enum,oneof"`
}

type ConstraintTest_ConstString struct {
	ConstString string `protobuf:"bytes,4,opt,name=const_string,json=constString,proto3,oneof"`
}

type ConstraintTest_LenString struct {
	LenString string `protobuf:"bytes,5,opt,name=len_string,json=lenString,proto3,oneof"`
}

type ConstraintTest_MinLenString struct {
	MinLenString string `protobuf:"bytes,6,opt,name=min_len_string,json=minLenString,proto3,oneof"`
}

type ConstraintTest_MaxLenString struct {
	MaxLenString string `protobuf:"bytes,7,opt,name=max_len_string,json=maxLenString,proto3,oneof"`
}

type ConstraintTest_MinMaxLenString struct {
	MinMaxLenString string `protobuf:"bytes,8,opt,name=min_max_len_string,json=minMaxLenString,proto3,oneof"`
}

type ConstraintTest_InString struct {
	InString string `protobuf:"bytes,9,opt,name=in_string,json=inString,proto3,oneof"`
}

type ConstraintTest_PatternString struct {
	PatternString string `protobuf:"bytes,10,opt,name=pattern_string,json=patternString,proto3,oneof"`
}

type ConstraintTest_PrefixString struct {
	PrefixString string `protobuf:"bytes,11,opt,name=prefix_string,json=prefixString,proto3,oneof"`
}

type ConstraintTest_SuffixString struct {
	SuffixString string `protobuf:"bytes,12,opt,name=suffix_string,json=suffixString,proto3,oneof"`
}

type ConstraintTest_ContainsString struct {
	ContainsString string `protobuf:"bytes,13,opt,name=contains_string,json=containsString,proto3,oneof"`
}

type ConstraintTest_PrefixSuffixString struct {
	PrefixSuffixString string `protobuf:"bytes,14,opt,name=prefix_suffix_string,json=prefixSuffixString,proto3,oneof"`
}

type ConstraintTest_PrefixContainsSuffixString struct {
	PrefixContainsSuffixString string `protobuf:"bytes,15,opt,name=prefix_contains_suffix_string,json=prefixContainsSuffixString,proto3,oneof"`
}

type ConstraintTest_HostnameString struct {
	HostnameString string `protobuf:"bytes,16,opt,name=hostname_string,json=hostnameString,proto3,oneof"`
}

type ConstraintTest_EmailString struct {
	EmailString string `protobuf:"bytes,17,opt,name=email_string,json=emailString,proto3,oneof"`
}

type ConstraintTest_IpString struct {
	IpString string `protobuf:"bytes,18,opt,name=ip_string,json=ipString,proto3,oneof"`
}

type ConstraintTest_Ipv4String struct {
	Ipv4String string `protobuf:"bytes,19,opt,name=ipv4_string,json=ipv4String,proto3,oneof"`
}

type ConstraintTest_Ipv6String struct {
	Ipv6String string `protobuf:"bytes,20,opt,name=ipv6_string,json=ipv6String,proto3,oneof"`
}

type ConstraintTest_UriString struct {
	UriString string `protobuf:"bytes,21,opt,name=uri_string,json=uriString,proto3,oneof"`
}

type ConstraintTest_UriRefString struct {
	UriRefString string `protobuf:"bytes,22,opt,name=uri_ref_string,json=uriRefString,proto3,oneof"`
}

type ConstraintTest_AddressString struct {
	AddressString string `protobuf:"bytes,23,opt,name=address_string,json=addressString,proto3,oneof"`
}

type ConstraintTest_UuidString struct {
	UuidString string `protobuf:"bytes,24,opt,name=uuid_string,json=uuidString,proto3,oneof"`
}

type ConstraintTest_TuuidString struct {
	TuuidString string `protobuf:"bytes,25,opt,name=tuuid_string,json=tuuidString,proto3,oneof"`
}

type ConstraintTest_IpWithPrefixlenString struct {
	IpWithPrefixlenString string `protobuf:"bytes,26,opt,name=ip_with_prefixlen_string,json=ipWithPrefixlenString,proto3,oneof"`
}

type ConstraintTest_Ipv4WithPrefixlenString struct {
	Ipv4WithPrefixlenString string `protobuf:"bytes,27,opt,name=ipv4_with_prefixlen_string,json=ipv4WithPrefixlenString,proto3,oneof"`
}

type ConstraintTest_Ipv6WithPrefixlenString struct {
	Ipv6WithPrefixlenString string `protobuf:"bytes,28,opt,name=ipv6_with_prefixlen_string,json=ipv6WithPrefixlenString,proto3,oneof"`
}

type ConstraintTest_IpPrefixString struct {
	IpPrefixString string `protobuf:"bytes,29,opt,name=ip_prefix_string,json=ipPrefixString,proto3,oneof"`
}

type ConstraintTest_Ipv4PrefixString struct {
	Ipv4PrefixString string `protobuf:"bytes,30,opt,name=ipv4_prefix_string,json=ipv4PrefixString,proto3,oneof"`
}

type ConstraintTest_Ipv6PrefixString struct {
	Ipv6PrefixString string `protobuf:"bytes,31,opt,name=ipv6_prefix_string,json=ipv6PrefixString,proto3,oneof"`
}

type ConstraintTest_HostAndPortString struct {
	HostAndPortString string `protobuf:"bytes,32,opt,name=host_and_port_string,json=hostAndPortString,proto3,oneof"`
}

type ConstraintTest_HttpHeaderNameStrictString struct {
	HttpHeaderNameStrictString string `protobuf:"bytes,33,opt,name=http_header_name_strict_string,json=httpHeaderNameStrictString,proto3,oneof"`
}

type ConstraintTest_LenBytes struct {
	LenBytes []byte `protobuf:"bytes,34,opt,name=len_bytes,json=lenBytes,proto3,oneof"`
}

type ConstraintTest_MinLenBytes struct {
	MinLenBytes []byte `protobuf:"bytes,35,opt,name=min_len_bytes,json=minLenBytes,proto3,oneof"`
}

type ConstraintTest_MaxLenBytes struct {
	MaxLenBytes []byte `protobuf:"bytes,36,opt,name=max_len_bytes,json=maxLenBytes,proto3,oneof"`
}

type ConstraintTest_MinMaxLenBytes struct {
	MinMaxLenBytes []byte `protobuf:"bytes,37,opt,name=min_max_len_bytes,json=minMaxLenBytes,proto3,oneof"`
}

type ConstraintTest_ConstInt32 struct {
	ConstInt32 int32 `protobuf:"varint,38,opt,name=const_int32,json=constInt32,proto3,oneof"`
}

type ConstraintTest_LtInt32 struct {
	LtInt32 int32 `protobuf:"varint,39,opt,name=lt_int32,json=ltInt32,proto3,oneof"`
}

type ConstraintTest_LteInt32 struct {
	LteInt32 int32 `protobuf:"varint,40,opt,name=lte_int32,json=lteInt32,proto3,oneof"`
}

type ConstraintTest_GtInt32 struct {
	GtInt32 int32 `protobuf:"varint,41,opt,name=gt_int32,json=gtInt32,proto3,oneof"`
}

type ConstraintTest_GteInt32 struct {
	GteInt32 int32 `protobuf:"varint,42,opt,name=gte_int32,json=gteInt32,proto3,oneof"`
}

type ConstraintTest_InInt32 struct {
	InInt32 int32 `protobuf:"varint,43,opt,name=in_int32,json=inInt32,proto3,oneof"`
}

type ConstraintTest_LtGtInt32 struct {
	LtGtInt32 int32 `protobuf:"varint,114,opt,name=lt_gt_int32,json=ltGtInt32,proto3,oneof"`
}

type ConstraintTest_ConstInt64 struct {
	ConstInt64 int64 `protobuf:"varint,44,opt,name=const_int64,json=constInt64,proto3,oneof"`
}

type ConstraintTest_LtInt64 struct {
	LtInt64 int64 `protobuf:"varint,45,opt,name=lt_int64,json=ltInt64,proto3,oneof"`
}

type ConstraintTest_LteInt64 struct {
	LteInt64 int64 `protobuf:"varint,46,opt,name=lte_int64,json=lteInt64,proto3,oneof"`
}

type ConstraintTest_GtInt64 struct {
	GtInt64 int64 `protobuf:"varint,47,opt,name=gt_int64,json=gtInt64,proto3,oneof"`
}

type ConstraintTest_GteInt64 struct {
	GteInt64 int64 `protobuf:"varint,48,opt,name=gte_int64,json=gteInt64,proto3,oneof"`
}

type ConstraintTest_InInt64 struct {
	InInt64 int64 `protobuf:"varint,49,opt,name=in_int64,json=inInt64,proto3,oneof"`
}

type ConstraintTest_LtGtInt64 struct {
	LtGtInt64 int64 `protobuf:"varint,115,opt,name=lt_gt_int64,json=ltGtInt64,proto3,oneof"`
}

type ConstraintTest_ConstUint32 struct {
	ConstUint32 uint32 `protobuf:"varint,50,opt,name=const_uint32,json=constUint32,proto3,oneof"`
}

type ConstraintTest_LtUint32 struct {
	LtUint32 uint32 `protobuf:"varint,51,opt,name=lt_uint32,json=ltUint32,proto3,oneof"`
}

type ConstraintTest_LteUint32 struct {
	LteUint32 uint32 `protobuf:"varint,52,opt,name=lte_uint32,json=lteUint32,proto3,oneof"`
}

type ConstraintTest_GtUint32 struct {
	GtUint32 uint32 `protobuf:"varint,53,opt,name=gt_uint32,json=gtUint32,proto3,oneof"`
}

type ConstraintTest_GteUint32 struct {
	GteUint32 uint32 `protobuf:"varint,54,opt,name=gte_uint32,json=gteUint32,proto3,oneof"`
}

type ConstraintTest_InUint32 struct {
	InUint32 uint32 `protobuf:"varint,55,opt,name=in_uint32,json=inUint32,proto3,oneof"`
}

type ConstraintTest_LtGtUint32 struct {
	LtGtUint32 uint32 `protobuf:"varint,116,opt,name=lt_gt_uint32,json=ltGtUint32,proto3,oneof"`
}

type ConstraintTest_ConstUint64 struct {
	ConstUint64 uint64 `protobuf:"varint,56,opt,name=const_uint64,json=constUint64,proto3,oneof"`
}

type ConstraintTest_LtUint64 struct {
	LtUint64 uint64 `protobuf:"varint,57,opt,name=lt_uint64,json=ltUint64,proto3,oneof"`
}

type ConstraintTest_LteUint64 struct {
	LteUint64 uint64 `protobuf:"varint,58,opt,name=lte_uint64,json=lteUint64,proto3,oneof"`
}

type ConstraintTest_GtUint64 struct {
	GtUint64 uint64 `protobuf:"varint,59,opt,name=gt_uint64,json=gtUint64,proto3,oneof"`
}

type ConstraintTest_GteUint64 struct {
	GteUint64 uint64 `protobuf:"varint,60,opt,name=gte_uint64,json=gteUint64,proto3,oneof"`
}

type ConstraintTest_InUint64 struct {
	InUint64 uint64 `protobuf:"varint,61,opt,name=in_uint64,json=inUint64,proto3,oneof"`
}

type ConstraintTest_LtGtUint64 struct {
	LtGtUint64 uint64 `protobuf:"varint,117,opt,name=lt_gt_uint64,json=ltGtUint64,proto3,oneof"`
}

type ConstraintTest_ConstSint32 struct {
	ConstSint32 int32 `protobuf:"zigzag32,62,opt,name=const_sint32,json=constSint32,proto3,oneof"`
}

type ConstraintTest_LtSint32 struct {
	LtSint32 int32 `protobuf:"zigzag32,63,opt,name=lt_sint32,json=ltSint32,proto3,oneof"`
}

type ConstraintTest_LteSint32 struct {
	LteSint32 int32 `protobuf:"zigzag32,64,opt,name=lte_sint32,json=lteSint32,proto3,oneof"`
}

type ConstraintTest_GtSint32 struct {
	GtSint32 int32 `protobuf:"zigzag32,65,opt,name=gt_sint32,json=gtSint32,proto3,oneof"`
}

type ConstraintTest_GteSint32 struct {
	GteSint32 int32 `protobuf:"zigzag32,66,opt,name=gte_sint32,json=gteSint32,proto3,oneof"`
}

type ConstraintTest_InSint32 struct {
	InSint32 int32 `protobuf:"zigzag32,67,opt,name=in_sint32,json=inSint32,proto3,oneof"`
}

type ConstraintTest_ConstSint64 struct {
	ConstSint64 int64 `protobuf:"zigzag64,68,opt,name=const_sint64,json=constSint64,proto3,oneof"`
}

type ConstraintTest_LtSint64 struct {
	LtSint64 int64 `protobuf:"zigzag64,69,opt,name=lt_sint64,json=ltSint64,proto3,oneof"`
}

type ConstraintTest_LteSint64 struct {
	LteSint64 int64 `protobuf:"zigzag64,70,opt,name=lte_sint64,json=lteSint64,proto3,oneof"`
}

type ConstraintTest_GtSint64 struct {
	GtSint64 int64 `protobuf:"zigzag64,71,opt,name=gt_sint64,json=gtSint64,proto3,oneof"`
}

type ConstraintTest_GteSint64 struct {
	GteSint64 int64 `protobuf:"zigzag64,72,opt,name=gte_sint64,json=gteSint64,proto3,oneof"`
}

type ConstraintTest_InSint64 struct {
	InSint64 int64 `protobuf:"zigzag64,73,opt,name=in_sint64,json=inSint64,proto3,oneof"`
}

type ConstraintTest_ConstSfixed32 struct {
	ConstSfixed32 int32 `protobuf:"fixed32,74,opt,name=const_sfixed32,json=constSfixed32,proto3,oneof"`
}

type ConstraintTest_LtSfixed32 struct {
	LtSfixed32 int32 `protobuf:"fixed32,75,opt,name=lt_sfixed32,json=ltSfixed32,proto3,oneof"`
}

type ConstraintTest_LteSfixed32 struct {
	LteSfixed32 int32 `protobuf:"fixed32,76,opt,name=lte_sfixed32,json=lteSfixed32,proto3,oneof"`
}

type ConstraintTest_GtSfixed32 struct {
	GtSfixed32 int32 `protobuf:"fixed32,77,opt,name=gt_sfixed32,json=gtSfixed32,proto3,oneof"`
}

type ConstraintTest_GteSfixed32 struct {
	GteSfixed32 int32 `protobuf:"fixed32,78,opt,name=gte_sfixed32,json=gteSfixed32,proto3,oneof"`
}

type ConstraintTest_InSfixed32 struct {
	InSfixed32 int32 `protobuf:"fixed32,79,opt,name=in_sfixed32,json=inSfixed32,proto3,oneof"`
}

type ConstraintTest_ConstSfixed64 struct {
	ConstSfixed64 int64 `protobuf:"fixed64,80,opt,name=const_sfixed64,json=constSfixed64,proto3,oneof"`
}

type ConstraintTest_LtSfixed64 struct {
	LtSfixed64 int64 `protobuf:"fixed64,81,opt,name=lt_sfixed64,json=ltSfixed64,proto3,oneof"`
}

type ConstraintTest_LteSfixed64 struct {
	LteSfixed64 int64 `protobuf:"fixed64,82,opt,name=lte_sfixed64,json=lteSfixed64,proto3,oneof"`
}

type ConstraintTest_GtSfixed64 struct {
	GtSfixed64 int64 `protobuf:"fixed64,83,opt,name=gt_sfixed64,json=gtSfixed64,proto3,oneof"`
}

type ConstraintTest_GteSfixed64 struct {
	GteSfixed64 int64 `protobuf:"fixed64,84,opt,name=gte_sfixed64,json=gteSfixed64,proto3,oneof"`
}

type ConstraintTest_InSfixed64 struct {
	InSfixed64 int64 `protobuf:"fixed64,85,opt,name=in_sfixed64,json=inSfixed64,proto3,oneof"`
}

func (*ConstraintTest_RequiredImplicit_) isConstraintTest_TestCase() {}

func (*ConstraintTest_RequiredOptional_) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstBool) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstEnum) isConstraintTest_TestCase() {}

func (*ConstraintTest_DefinedOnlyEnum) isConstraintTest_TestCase() {}

func (*ConstraintTest_InEnum) isConstraintTest_TestCase() {}

func (*ConstraintTest_NotInEnum) isConstraintTest_TestCase() {}

func (*ConstraintTest_DefinedOnlyNotInEnum) isConstraintTest_TestCase() {}

func (*ConstraintTest_InAndNotInEnum) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstString) isConstraintTest_TestCase() {}

func (*ConstraintTest_LenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_MinLenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_MaxLenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_MinMaxLenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_InString) isConstraintTest_TestCase() {}

func (*ConstraintTest_PatternString) isConstraintTest_TestCase() {}

func (*ConstraintTest_PrefixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_SuffixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_ContainsString) isConstraintTest_TestCase() {}

func (*ConstraintTest_PrefixSuffixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_PrefixContainsSuffixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_HostnameString) isConstraintTest_TestCase() {}

func (*ConstraintTest_EmailString) isConstraintTest_TestCase() {}

func (*ConstraintTest_IpString) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv4String) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv6String) isConstraintTest_TestCase() {}

func (*ConstraintTest_UriString) isConstraintTest_TestCase() {}

func (*ConstraintTest_UriRefString) isConstraintTest_TestCase() {}

func (*ConstraintTest_AddressString) isConstraintTest_TestCase() {}

func (*ConstraintTest_UuidString) isConstraintTest_TestCase() {}

func (*ConstraintTest_TuuidString) isConstraintTest_TestCase() {}

func (*ConstraintTest_IpWithPrefixlenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv4WithPrefixlenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv6WithPrefixlenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_IpPrefixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv4PrefixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv6PrefixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_HostAndPortString) isConstraintTest_TestCase() {}

func (*ConstraintTest_HttpHeaderNameStrictString) isConstraintTest_TestCase() {}

func (*ConstraintTest_LenBytes) isConstraintTest_TestCase() {}

func (*ConstraintTest_MinLenBytes) isConstraintTest_TestCase() {}

func (*ConstraintTest_MaxLenBytes) isConstraintTest_TestCase() {}

func (*ConstraintTest_MinMaxLenBytes) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstInt32) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtInt32) isConstraintTest_TestCase() {}

func (*ConstraintTest_LteInt32) isConstraintTest_TestCase() {}

func (*ConstraintTest_GtInt32) isConstraintTest_TestCase() {}

func (*ConstraintTest_GteInt32) isConstraintTest_TestCase() {}

func (*ConstraintTest_InInt32) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtGtInt32) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstInt64) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtInt64) isConstraintTest_TestCase() {}

func (*ConstraintTest_LteInt64) isConstraintTest_TestCase() {}

func (*ConstraintTest_GtInt64) isConstraintTest_TestCase() {}

func (*ConstraintTest_GteInt64) isConstraintTest_TestCase() {}

func (*ConstraintTest_InInt64) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtGtInt64) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstUint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtUint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_LteUint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_GtUint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_GteUint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_InUint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtGtUint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstUint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtUint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_LteUint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_GtUint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_GteUint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_InUint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtGtUint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstSint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtSint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_LteSint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_GtSint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_GteSint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_InSint32) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstSint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtSint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_LteSint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_GtSint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_GteSint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_InSint64) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstSfixed32) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtSfixed32) isConstraintTest_TestCase() {}

func (*ConstraintTest_LteSfixed32) isConstraintTest_TestCase() {}

func (*ConstraintTest_GtSfixed32) isConstraintTest_TestCase() {}

func (*ConstraintTest_GteSfixed32) isConstraintTest_TestCase() {}

func (*ConstraintTest_InSfixed32) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstSfixed64) isConstraintTest_TestCase() {}

func (*ConstraintTest_LtSfixed64) isConstraintTest_TestCase() {}

func (*ConstraintTest_LteSfixed64) isConstraintTest_TestCase() {}

func (*ConstraintTest_GtSfixed64) isConstraintTest_TestCase() {}

func (*ConstraintTest_GteSfixed64) isConstraintTest_TestCase() {}

func (*ConstraintTest_InSfixed64) isConstraintTest_TestCase() {}

type ConstraintTests struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestCases     []*ConstraintTest      `protobuf:"bytes,1,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstraintTests) Reset() {
	*x = ConstraintTests{}
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstraintTests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintTests) ProtoMessage() {}

func (x *ConstraintTests) ProtoReflect() protoreflect.Message {
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintTests.ProtoReflect.Descriptor instead.
func (*ConstraintTests) Descriptor() ([]byte, []int) {
	return file_buf_protoschema_test_v1_constraints_proto_rawDescGZIP(), []int{1}
}

func (x *ConstraintTests) GetTestCases() []*ConstraintTest {
	if x != nil {
		return x.TestCases
	}
	return nil
}

type ConstraintTest_RequiredImplicit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BoolValue     bool                   `protobuf:"varint,1,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue   string                 `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstraintTest_RequiredImplicit) Reset() {
	*x = ConstraintTest_RequiredImplicit{}
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstraintTest_RequiredImplicit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintTest_RequiredImplicit) ProtoMessage() {}

func (x *ConstraintTest_RequiredImplicit) ProtoReflect() protoreflect.Message {
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintTest_RequiredImplicit.ProtoReflect.Descriptor instead.
func (*ConstraintTest_RequiredImplicit) Descriptor() ([]byte, []int) {
	return file_buf_protoschema_test_v1_constraints_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConstraintTest_RequiredImplicit) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *ConstraintTest_RequiredImplicit) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

type ConstraintTest_RequiredOptional struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BoolValue     *bool                  `protobuf:"varint,1,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
	StringValue   *string                `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstraintTest_RequiredOptional) Reset() {
	*x = ConstraintTest_RequiredOptional{}
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstraintTest_RequiredOptional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintTest_RequiredOptional) ProtoMessage() {}

func (x *ConstraintTest_RequiredOptional) ProtoReflect() protoreflect.Message {
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintTest_RequiredOptional.ProtoReflect.Descriptor instead.
func (*ConstraintTest_RequiredOptional) Descriptor() ([]byte, []int) {
	return file_buf_protoschema_test_v1_constraints_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ConstraintTest_RequiredOptional) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *ConstraintTest_RequiredOptional) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

var File_buf_protoschema_test_v1_constraints_proto protoreflect.FileDescriptor

const file_buf_protoschema_test_v1_constraints_proto_rawDesc = "" +
	"\n" +
	")buf/protoschema/test/v1/constraints.proto\x12\x17buf.protoschema.test.v1\x1a\x1bbuf/validate/validate.proto\"\xd45\n" +
	"\x0eConstraintTest\x12g\n" +
	"\x11required_implicit\x18\x01 \x01(\v28.buf.protoschema.test.v1.ConstraintTest.RequiredImplicitH\x00R\x10requiredImplicit\x12g\n" +
	"\x11required_optional\x18\x02 \x01(\v28.buf.protoschema.test.v1.ConstraintTest.RequiredOptionalH\x00R\x10requiredOptional\x12(\n" +
	"\n" +
	"const_bool\x18\x03 \x01(\bB\a\xbaH\x04j\x02\b\x00H\x00R\tconstBool\x12W\n" +
	"\n" +
	"const_enum\x18w \x01(\x0e2,.buf.protoschema.test.v1.ConstraintTest.EnumB\b\xbaH\x05\x82\x01\x02\b\x02H\x00R\tconstEnum\x12d\n" +
	"\x11defined_only_enum\x18x \x01(\x0e2,.buf.protoschema.test.v1.ConstraintTest.EnumB\b\xbaH\x05\x82\x01\x02\x10\x01H\x00R\x0fdefinedOnlyEnum\x12S\n" +
	"\ain_enum\x18y \x01(\x0e2,.buf.protoschema.test.v1.ConstraintTest.EnumB\n" +
	"\xbaH\a\x82\x01\x04\x18\x01\x18\x02H\x00R\x06inEnum\x12Z\n" +
	"\vnot_in_enum\x18z \x01(\x0e2,.buf.protoschema.test.v1.ConstraintTest.EnumB\n" +
	"\xbaH\a\x82\x01\x04 \x00 \aH\x00R\tnotInEnum\x12r\n" +
	"\x18defined_only_not_in_enum\x18{ \x01(\x0e2,.buf.protoschema.test.v1.ConstraintTest.EnumB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00H\x00R\x14definedOnlyNotInEnum\x12j\n" +
	"\x12in_and_not_in_enum\x18| \x01(\x0e2,.buf.protoschema.test.v1.ConstraintTest.EnumB\x0e\xbaH\v\x82\x01\b\x18\x01\x18\a \x00 \aH\x00R\x0einAndNotInEnum\x121\n" +
	"\fconst_string\x18\x04 \x01(\tB\f\xbaH\tr\a\n" +
	"\x05constH\x00R\vconstString\x12)\n" +
	"\n" +
	"len_string\x18\x05 \x01(\tB\b\xbaH\x05r\x03\x98\x01\x05H\x00R\tlenString\x12/\n" +
	"\x0emin_len_string\x18\x06 \x01(\tB\a\xbaH\x04r\x02\x10\x05H\x00R\fminLenString\x12/\n" +
	"\x0emax_len_string\x18\a \x01(\tB\a\xbaH\x04r\x02\x18\x05H\x00R\fmaxLenString\x128\n" +
	"\x12min_max_len_string\x18\b \x01(\tB\t\xbaH\x06r\x04\x10\x05\x18\n" +
	"H\x00R\x0fminMaxLenString\x12.\n" +
	"\tin_string\x18\t \x01(\tB\x0f\xbaH\fr\n" +
	"R\x03in1R\x03in2H\x00R\binString\x129\n" +
	"\x0epattern_string\x18\n" +
	" \x01(\tB\x10\xbaH\rr\v2\t^pat*ern$H\x00R\rpatternString\x125\n" +
	"\rprefix_string\x18\v \x01(\tB\x0e\xbaH\vr\t:\aprefix_H\x00R\fprefixString\x125\n" +
	"\rsuffix_string\x18\f \x01(\tB\x0e\xbaH\vr\tB\a_suffixH\x00R\fsuffixString\x12<\n" +
	"\x0fcontains_string\x18\r \x01(\tB\x11\xbaH\x0er\fJ\n" +
	"_contains_H\x00R\x0econtainsString\x12K\n" +
	"\x14prefix_suffix_string\x18\x0e \x01(\tB\x17\xbaH\x14r\x12:\aprefix_B\a_suffixH\x00R\x12prefixSuffixString\x12f\n" +
	"\x1dprefix_contains_suffix_string\x18\x0f \x01(\tB!\xbaH\x1er\x1c:\aprefix_B\a_suffixJ\bcontainsH\x00R\x1aprefixContainsSuffixString\x122\n" +
	"\x0fhostname_string\x18\x10 \x01(\tB\a\xbaH\x04r\x02h\x01H\x00R\x0ehostnameString\x12,\n" +
	"\femail_string\x18\x11 \x01(\tB\a\xbaH\x04r\x02`\x01H\x00R\vemailString\x12&\n" +
	"\tip_string\x18\x12 \x01(\tB\a\xbaH\x04r\x02p\x01H\x00R\bipString\x12*\n" +
	"\vipv4_string\x18\x13 \x01(\tB\a\xbaH\x04r\x02x\x01H\x00R\n" +
	"ipv4String\x12+\n" +
	"\vipv6_string\x18\x14 \x01(\tB\b\xbaH\x05r\x03\x80\x01\x01H\x00R\n" +
	"ipv6String\x12)\n" +
	"\n" +
	"uri_string\x18\x15 \x01(\tB\b\xbaH\x05r\x03\x88\x01\x01H\x00R\turiString\x120\n" +
	"\x0euri_ref_string\x18\x16 \x01(\tB\b\xbaH\x05r\x03\x90\x01\x01H\x00R\furiRefString\x121\n" +
	"\x0eaddress_string\x18\x17 \x01(\tB\b\xbaH\x05r\x03\xa8\x01\x01H\x00R\raddressString\x12+\n" +
	"\vuuid_string\x18\x18 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x00R\n" +
	"uuidString\x12-\n" +
	"\ftuuid_string\x18\x19 \x01(\tB\b\xbaH\x05r\x03\x88\x02\x01H\x00R\vtuuidString\x12C\n" +
	"\x18ip_with_prefixlen_string\x18\x1a \x01(\tB\b\xbaH\x05r\x03\xd0\x01\x01H\x00R\x15ipWithPrefixlenString\x12G\n" +
	"\x1aipv4_with_prefixlen_string\x18\x1b \x01(\tB\b\xbaH\x05r\x03\xd8\x01\x01H\x00R\x17ipv4WithPrefixlenString\x12G\n" +
	"\x1aipv6_with_prefixlen_string\x18\x1c \x01(\tB\b\xbaH\x05r\x03\xe0\x01\x01H\x00R\x17ipv6WithPrefixlenString\x124\n" +
	"\x10ip_prefix_string\x18\x1d \x01(\tB\b\xbaH\x05r\x03\xe8\x01\x01H\x00R\x0eipPrefixString\x128\n" +
	"\x12ipv4_prefix_string\x18\x1e \x01(\tB\b\xbaH\x05r\x03\xf0\x01\x01H\x00R\x10ipv4PrefixString\x128\n" +
	"\x12ipv6_prefix_string\x18\x1f \x01(\tB\b\xbaH\x05r\x03\xf8\x01\x01H\x00R\x10ipv6PrefixString\x12;\n" +
	"\x14host_and_port_string\x18  \x01(\tB\b\xbaH\x05r\x03\x80\x02\x01H\x00R\x11hostAndPortString\x12Q\n" +
	"\x1ehttp_header_name_strict_string\x18! \x01(\tB\v\xbaH\br\x06\xc8\x01\x01\xc0\x01\x01H\x00R\x1ahttpHeaderNameStrictString\x12&\n" +
	"\tlen_bytes\x18\" \x01(\fB\a\xbaH\x04z\x02h\x05H\x00R\blenBytes\x12-\n" +
	"\rmin_len_bytes\x18# \x01(\fB\a\xbaH\x04z\x02\x10\x05H\x00R\vminLenBytes\x12-\n" +
	"\rmax_len_bytes\x18$ \x01(\fB\a\xbaH\x04z\x02\x18\x05H\x00R\vmaxLenBytes\x126\n" +
	"\x11min_max_len_bytes\x18% \x01(\fB\t\xbaH\x06z\x04\x10\x05\x18\n" +
	"H\x00R\x0eminMaxLenBytes\x12*\n" +
	"\vconst_int32\x18& \x01(\x05B\a\xbaH\x04\x1a\x02\b\x05H\x00R\n" +
	"constInt32\x12$\n" +
	"\blt_int32\x18' \x01(\x05B\a\xbaH\x04\x1a\x02\x10\x05H\x00R\altInt32\x12&\n" +
	"\tlte_int32\x18( \x01(\x05B\a\xbaH\x04\x1a\x02\x18\x05H\x00R\blteInt32\x12$\n" +
	"\bgt_int32\x18) \x01(\x05B\a\xbaH\x04\x1a\x02 \x05H\x00R\agtInt32\x12&\n" +
	"\tgte_int32\x18* \x01(\x05B\a\xbaH\x04\x1a\x02(\x05H\x00R\bgteInt32\x12&\n" +
	"\bin_int32\x18+ \x01(\x05B\t\xbaH\x06\x1a\x040\x010\x02H\x00R\ainInt32\x12+\n" +
	"\vlt_gt_int32\x18r \x01(\x05B\t\xbaH\x06\x1a\x04\x10\x01 \x05H\x00R\tltGtInt32\x12*\n" +
	"\vconst_int64\x18, \x01(\x03B\a\xbaH\x04\"\x02\b\x05H\x00R\n" +
	"constInt64\x12$\n" +
	"\blt_int64\x18- \x01(\x03B\a\xbaH\x04\"\x02\x10\x05H\x00R\altInt64\x12&\n" +
	"\tlte_int64\x18. \x01(\x03B\a\xbaH\x04\"\x02\x18\x05H\x00R\blteInt64\x12$\n" +
	"\bgt_int64\x18/ \x01(\x03B\a\xbaH\x04\"\x02 \x05H\x00R\agtInt64\x12&\n" +
	"\tgte_int64\x180 \x01(\x03B\a\xbaH\x04\"\x02(\x05H\x00R\bgteInt64\x12&\n" +
	"\bin_int64\x181 \x01(\x03B\t\xbaH\x06\"\x040\x010\x02H\x00R\ainInt64\x12+\n" +
	"\vlt_gt_int64\x18s \x01(\x03B\t\xbaH\x06\"\x04\x10\x01 \x05H\x00R\tltGtInt64\x12,\n" +
	"\fconst_uint32\x182 \x01(\rB\a\xbaH\x04*\x02\b\x05H\x00R\vconstUint32\x12&\n" +
	"\tlt_uint32\x183 \x01(\rB\a\xbaH\x04*\x02\x10\x05H\x00R\bltUint32\x12(\n" +
	"\n" +
	"lte_uint32\x184 \x01(\rB\a\xbaH\x04*\x02\x18\x05H\x00R\tlteUint32\x12&\n" +
	"\tgt_uint32\x185 \x01(\rB\a\xbaH\x04*\x02 \x05H\x00R\bgtUint32\x12(\n" +
	"\n" +
	"gte_uint32\x186 \x01(\rB\a\xbaH\x04*\x02(\x05H\x00R\tgteUint32\x12(\n" +
	"\tin_uint32\x187 \x01(\rB\t\xbaH\x06*\x040\x010\x02H\x00R\binUint32\x12-\n" +
	"\flt_gt_uint32\x18t \x01(\rB\t\xbaH\x06*\x04\x10\x01 \x05H\x00R\n" +
	"ltGtUint32\x12,\n" +
	"\fconst_uint64\x188 \x01(\x04B\a\xbaH\x042\x02\b\x05H\x00R\vconstUint64\x12&\n" +
	"\tlt_uint64\x189 \x01(\x04B\a\xbaH\x042\x02\x10\x05H\x00R\bltUint64\x12(\n" +
	"\n" +
	"lte_uint64\x18: \x01(\x04B\a\xbaH\x042\x02\x18\x05H\x00R\tlteUint64\x12&\n" +
	"\tgt_uint64\x18; \x01(\x04B\a\xbaH\x042\x02 \x05H\x00R\bgtUint64\x12(\n" +
	"\n" +
	"gte_uint64\x18< \x01(\x04B\a\xbaH\x042\x02(\x05H\x00R\tgteUint64\x12(\n" +
	"\tin_uint64\x18= \x01(\x04B\t\xbaH\x062\x040\x010\x02H\x00R\binUint64\x12-\n" +
	"\flt_gt_uint64\x18u \x01(\x04B\t\xbaH\x062\x04\x10\x01 \x05H\x00R\n" +
	"ltGtUint64\x12,\n" +
	"\fconst_sint32\x18> \x01(\x11B\a\xbaH\x04:\x02\b\n" +
	"H\x00R\vconstSint32\x12&\n" +
	"\tlt_sint32\x18? \x01(\x11B\a\xbaH\x04:\x02\x10\n" +
	"H\x00R\bltSint32\x12(\n" +
	"\n" +
	"lte_sint32\x18@ \x01(\x11B\a\xbaH\x04:\x02\x18\n" +
	"H\x00R\tlteSint32\x12&\n" +
	"\tgt_sint32\x18A \x01(\x11B\a\xbaH\x04:\x02 \n" +
	"H\x00R\bgtSint32\x12(\n" +
	"\n" +
	"gte_sint32\x18B \x01(\x11B\a\xbaH\x04:\x02(\n" +
	"H\x00R\tgteSint32\x12(\n" +
	"\tin_sint32\x18C \x01(\x11B\t\xbaH\x06:\x040\x020\x04H\x00R\binSint32\x12,\n" +
	"\fconst_sint64\x18D \x01(\x12B\a\xbaH\x04B\x02\b\n" +
	"H\x00R\vconstSint64\x12&\n" +
	"\tlt_sint64\x18E \x01(\x12B\a\xbaH\x04B\x02\x10\n" +
	"H\x00R\bltSint64\x12(\n" +
	"\n" +
	"lte_sint64\x18F \x01(\x12B\a\xbaH\x04B\x02\x18\n" +
	"H\x00R\tlteSint64\x12&\n" +
	"\tgt_sint64\x18G \x01(\x12B\a\xbaH\x04B\x02 \n" +
	"H\x00R\bgtSint64\x12(\n" +
	"\n" +
	"gte_sint64\x18H \x01(\x12B\a\xbaH\x04B\x02(\n" +
	"H\x00R\tgteSint64\x12(\n" +
	"\tin_sint64\x18I \x01(\x12B\t\xbaH\x06B\x040\x020\x04H\x00R\binSint64\x123\n" +
	"\x0econst_sfixed32\x18J \x01(\x0fB\n" +
	"\xbaH\aZ\x05\r\x05\x00\x00\x00H\x00R\rconstSfixed32\x12-\n" +
	"\vlt_sfixed32\x18K \x01(\x0fB\n" +
	"\xbaH\aZ\x05\x15\x05\x00\x00\x00H\x00R\n" +
	"ltSfixed32\x12/\n" +
	"\flte_sfixed32\x18L \x01(\x0fB\n" +
	"\xbaH\aZ\x05\x1d\x05\x00\x00\x00H\x00R\vlteSfixed32\x12-\n" +
	"\vgt_sfixed32\x18M \x01(\x0fB\n" +
	"\xbaH\aZ\x05%\x05\x00\x00\x00H\x00R\n" +
	"gtSfixed32\x12/\n" +
	"\fgte_sfixed32\x18N \x01(\x0fB\n" +
	"\xbaH\aZ\x05-\x05\x00\x00\x00H\x00R\vgteSfixed32\x122\n" +
	"\vin_sfixed32\x18O \x01(\x0fB\x0f\xbaH\fZ\n" +
	"5\x01\x00\x00\x005\x02\x00\x00\x00H\x00R\n" +
	"inSfixed32\x127\n" +
	"\x0econst_sfixed64\x18P \x01(\x10B\x0e\xbaH\vb\t\t\x05\x00\x00\x00\x00\x00\x00\x00H\x00R\rconstSfixed64\x121\n" +
	"\vlt_sfixed64\x18Q \x01(\x10B\x0e\xbaH\vb\t\x11\x05\x00\x00\x00\x00\x00\x00\x00H\x00R\n" +
	"ltSfixed64\x123\n" +
	"\flte_sfixed64\x18R \x01(\x10B\x0e\xbaH\vb\t\x19\x05\x00\x00\x00\x00\x00\x00\x00H\x00R\vlteSfixed64\x121\n" +
	"\vgt_sfixed64\x18S \x01(\x10B\x0e\xbaH\vb\t!\x05\x00\x00\x00\x00\x00\x00\x00H\x00R\n" +
	"gtSfixed64\x123\n" +
	"\fgte_sfixed64\x18T \x01(\x10B\x0e\xbaH\vb\t)\x05\x00\x00\x00\x00\x00\x00\x00H\x00R\vgteSfixed64\x12:\n" +
	"\vin_sfixed64\x18U \x01(\x10B\x17\xbaH\x14b\x121\x01\x00\x00\x00\x00\x00\x00\x001\x02\x00\x00\x00\x00\x00\x00\x00H\x00R\n" +
	"inSfixed64\x12/\n" +
	"\rconst_fixed32\x18V \x01(\aB\n" +
	"\xbaH\aJ\x05\r\x05\x00\x00\x00R\fconstFixed32\x12)\n" +
	"\n" +
	"lt_fixed32\x18W \x01(\aB\n" +
	"\xbaH\aJ\x05\x15\x05\x00\x00\x00R\tltFixed32\x12+\n" +
	"\vlte_fixed32\x18X \x01(\aB\n" +
	"\xbaH\aJ\x05\x1d\x05\x00\x00\x00R\n" +
	"lteFixed32\x12)\n" +
	"\n" +
	"gt_fixed32\x18Y \x01(\aB\n" +
	"\xbaH\aJ\x05%\x05\x00\x00\x00R\tgtFixed32\x12+\n" +
	"\vgte_fixed32\x18Z \x01(\aB\n" +
	"\xbaH\aJ\x05-\x05\x00\x00\x00R\n" +
	"gteFixed32\x12.\n" +
	"\n" +
	"in_fixed32\x18[ \x01(\aB\x0f\xbaH\fJ\n" +
	"5\x01\x00\x00\x005\x02\x00\x00\x00R\tinFixed32\x123\n" +
	"\rconst_fixed64\x18\\ \x01(\x06B\x0e\xbaH\vR\t\t\x05\x00\x00\x00\x00\x00\x00\x00R\fconstFixed64\x12-\n" +
	"\n" +
	"lt_fixed64\x18] \x01(\x06B\x0e\xbaH\vR\t\x11\x05\x00\x00\x00\x00\x00\x00\x00R\tltFixed64\x12/\n" +
	"\vlte_fixed64\x18^ \x01(\x06B\x0e\xbaH\vR\t\x19\x05\x00\x00\x00\x00\x00\x00\x00R\n" +
	"lteFixed64\x12-\n" +
	"\n" +
	"gt_fixed64\x18_ \x01(\x06B\x0e\xbaH\vR\t!\x05\x00\x00\x00\x00\x00\x00\x00R\tgtFixed64\x12/\n" +
	"\vgte_fixed64\x18` \x01(\x06B\x0e\xbaH\vR\t)\x05\x00\x00\x00\x00\x00\x00\x00R\n" +
	"gteFixed64\x126\n" +
	"\n" +
	"in_fixed64\x18a \x01(\x06B\x17\xbaH\x14R\x121\x01\x00\x00\x00\x00\x00\x00\x001\x02\x00\x00\x00\x00\x00\x00\x00R\tinFixed64\x121\n" +
	"\fconst_double\x18b \x01(\x01B\x0e\xbaH\v\x12\t\t\x00\x00\x00\x00\x00\x00\x14@R\vconstDouble\x12+\n" +
	"\tlt_double\x18c \x01(\x01B\x0e\xbaH\v\x12\t\x11\x00\x00\x00\x00\x00\x00\x14@R\bltDouble\x12-\n" +
	"\n" +
	"lte_double\x18d \x01(\x01B\x0e\xbaH\v\x12\t\x19\x00\x00\x00\x00\x00\x00\x14@R\tlteDouble\x12+\n" +
	"\tgt_double\x18e \x01(\x01B\x0e\xbaH\v\x12\t!\x00\x00\x00\x00\x00\x00\x14@R\bgtDouble\x12-\n" +
	"\n" +
	"gte_double\x18f \x01(\x01B\x0e\xbaH\v\x12\t)\x00\x00\x00\x00\x00\x00\x14@R\tgteDouble\x124\n" +
	"\tin_double\x18g \x01(\x01B\x17\xbaH\x14\x12\x121\x00\x00\x00\x00\x00\x00\xf0?1\x00\x00\x00\x00\x00\x00\x00@R\binDouble\x12,\n" +
	"\rfinite_double\x18h \x01(\x01B\a\xbaH\x04\x12\x02@\x01R\ffiniteDouble\x129\n" +
	"\flt_gt_double\x18i \x01(\x01B\x17\xbaH\x14\x12\x12\x11\x00\x00\x00\x00\x00\x00\xf0?!\x00\x00\x00\x00\x00\x00\x14@R\n" +
	"ltGtDouble\x12+\n" +
	"\vconst_float\x18j \x01(\x02B\n" +
	"\xbaH\a\n" +
	"\x05\r\x00\x00\xa0@R\n" +
	"constFloat\x12%\n" +
	"\blt_float\x18k \x01(\x02B\n" +
	"\xbaH\a\n" +
	"\x05\x15\x00\x00\xa0@R\altFloat\x12'\n" +
	"\tlte_float\x18l \x01(\x02B\n" +
	"\xbaH\a\n" +
	"\x05\x1d\x00\x00\xa0@R\blteFloat\x12%\n" +
	"\bgt_float\x18m \x01(\x02B\n" +
	"\xbaH\a\n" +
	"\x05%\x00\x00\xa0@R\agtFloat\x12'\n" +
	"\tgte_float\x18n \x01(\x02B\n" +
	"\xbaH\a\n" +
	"\x05-\x00\x00\xa0@R\bgteFloat\x12*\n" +
	"\bin_float\x18o \x01(\x02B\x0f\xbaH\f\n" +
	"\n" +
	"5\x00\x00\x80?5\x00\x00\x00@R\ainFloat\x12*\n" +
	"\ffinite_float\x18p \x01(\x02B\a\xbaH\x04\n" +
	"\x02@\x01R\vfiniteFloat\x12/\n" +
	"\vlt_gt_float\x18q \x01(\x02B\x0f\xbaH\f\n" +
	"\n" +
	"\x15\x00\x00\x80?%\x00\x00\xa0@R\tltGtFloat\x12u\n" +
	"\x06in_map\x18v \x03(\v22.buf.protoschema.test.v1.ConstraintTest.InMapEntryB*\xbaH'\x9a\x01$\"\x0er\fR\x04key1R\x04key2*\x12r\x10R\x06value1R\x06value2R\x05inMap\x1ad\n" +
	"\x10RequiredImplicit\x12%\n" +
	"\n" +
	"bool_value\x18\x01 \x01(\bB\x06\xbaH\x03\xc8\x01\x01R\tboolValue\x12)\n" +
	"\fstring_value\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\vstringValue\x1a\x8e\x01\n" +
	"\x10RequiredOptional\x12*\n" +
	"\n" +
	"bool_value\x18\x01 \x01(\bB\x06\xbaH\x03\xc8\x01\x01H\x00R\tboolValue\x88\x01\x01\x12.\n" +
	"\fstring_value\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01H\x01R\vstringValue\x88\x01\x01B\r\n" +
	"\v_bool_valueB\x0f\n" +
	"\r_string_value\x1a8\n" +
	"\n" +
	"InMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"I\n" +
	"\x04Enum\x12\x14\n" +
	"\x10ENUM_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tENUM_VAL1\x10\x01\x12\r\n" +
	"\tENUM_VAL2\x10\x02\x12\r\n" +
	"\tENUM_VAL7\x10\aB\v\n" +
	"\ttest_case\"Y\n" +
	"\x0fConstraintTests\x12F\n" +
	"\n" +
	"test_cases\x18\x01 \x03(\v2'.buf.protoschema.test.v1.ConstraintTestR\ttestCasesB\x89\x02\n" +
	"\x1bcom.buf.protoschema.test.v1B\x10ConstraintsProtoP\x01ZYgithub.com/bufbuild/protoschema-plugins/internal/gen/proto/buf/protoschema/test/v1;testv1\xa2\x02\x03BPT\xaa\x02\x17Buf.Protoschema.Test.V1\xca\x02\x17Buf\\Protoschema\\Test\\V1\xe2\x02#Buf\\Protoschema\\Test\\V1\\GPBMetadata\xea\x02\x1aBuf::Protoschema::Test::V1b\x06proto3"

var (
	file_buf_protoschema_test_v1_constraints_proto_rawDescOnce sync.Once
	file_buf_protoschema_test_v1_constraints_proto_rawDescData []byte
)

func file_buf_protoschema_test_v1_constraints_proto_rawDescGZIP() []byte {
	file_buf_protoschema_test_v1_constraints_proto_rawDescOnce.Do(func() {
		file_buf_protoschema_test_v1_constraints_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_buf_protoschema_test_v1_constraints_proto_rawDesc), len(file_buf_protoschema_test_v1_constraints_proto_rawDesc)))
	})
	return file_buf_protoschema_test_v1_constraints_proto_rawDescData
}

var file_buf_protoschema_test_v1_constraints_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_buf_protoschema_test_v1_constraints_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_buf_protoschema_test_v1_constraints_proto_goTypes = []any{
	(ConstraintTest_Enum)(0),                // 0: buf.protoschema.test.v1.ConstraintTest.Enum
	(*ConstraintTest)(nil),                  // 1: buf.protoschema.test.v1.ConstraintTest
	(*ConstraintTests)(nil),                 // 2: buf.protoschema.test.v1.ConstraintTests
	(*ConstraintTest_RequiredImplicit)(nil), // 3: buf.protoschema.test.v1.ConstraintTest.RequiredImplicit
	(*ConstraintTest_RequiredOptional)(nil), // 4: buf.protoschema.test.v1.ConstraintTest.RequiredOptional
	nil,                                     // 5: buf.protoschema.test.v1.ConstraintTest.InMapEntry
}
var file_buf_protoschema_test_v1_constraints_proto_depIdxs = []int32{
	3,  // 0: buf.protoschema.test.v1.ConstraintTest.required_implicit:type_name -> buf.protoschema.test.v1.ConstraintTest.RequiredImplicit
	4,  // 1: buf.protoschema.test.v1.ConstraintTest.required_optional:type_name -> buf.protoschema.test.v1.ConstraintTest.RequiredOptional
	0,  // 2: buf.protoschema.test.v1.ConstraintTest.const_enum:type_name -> buf.protoschema.test.v1.ConstraintTest.Enum
	0,  // 3: buf.protoschema.test.v1.ConstraintTest.defined_only_enum:type_name -> buf.protoschema.test.v1.ConstraintTest.Enum
	0,  // 4: buf.protoschema.test.v1.ConstraintTest.in_enum:type_name -> buf.protoschema.test.v1.ConstraintTest.Enum
	0,  // 5: buf.protoschema.test.v1.ConstraintTest.not_in_enum:type_name -> buf.protoschema.test.v1.ConstraintTest.Enum
	0,  // 6: buf.protoschema.test.v1.ConstraintTest.defined_only_not_in_enum:type_name -> buf.protoschema.test.v1.ConstraintTest.Enum
	0,  // 7: buf.protoschema.test.v1.ConstraintTest.in_and_not_in_enum:type_name -> buf.protoschema.test.v1.ConstraintTest.Enum
	5,  // 8: buf.protoschema.test.v1.ConstraintTest.in_map:type_name -> buf.protoschema.test.v1.ConstraintTest.InMapEntry
	1,  // 9: buf.protoschema.test.v1.ConstraintTests.test_cases:type_name -> buf.protoschema.test.v1.ConstraintTest
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_buf_protoschema_test_v1_constraints_proto_init() }
func file_buf_protoschema_test_v1_constraints_proto_init() {
	if File_buf_protoschema_test_v1_constraints_proto != nil {
		return
	}
	file_buf_protoschema_test_v1_constraints_proto_msgTypes[0].OneofWrappers = []any{
		(*ConstraintTest_RequiredImplicit_)(nil),
		(*ConstraintTest_RequiredOptional_)(nil),
		(*ConstraintTest_ConstBool)(nil),
		(*ConstraintTest_ConstEnum)(nil),
		(*ConstraintTest_DefinedOnlyEnum)(nil),
		(*ConstraintTest_InEnum)(nil),
		(*ConstraintTest_NotInEnum)(nil),
		(*ConstraintTest_DefinedOnlyNotInEnum)(nil),
		(*ConstraintTest_InAndNotInEnum)(nil),
		(*ConstraintTest_ConstString)(nil),
		(*ConstraintTest_LenString)(nil),
		(*ConstraintTest_MinLenString)(nil),
		(*ConstraintTest_MaxLenString)(nil),
		(*ConstraintTest_MinMaxLenString)(nil),
		(*ConstraintTest_InString)(nil),
		(*ConstraintTest_PatternString)(nil),
		(*ConstraintTest_PrefixString)(nil),
		(*ConstraintTest_SuffixString)(nil),
		(*ConstraintTest_ContainsString)(nil),
		(*ConstraintTest_PrefixSuffixString)(nil),
		(*ConstraintTest_PrefixContainsSuffixString)(nil),
		(*ConstraintTest_HostnameString)(nil),
		(*ConstraintTest_EmailString)(nil),
		(*ConstraintTest_IpString)(nil),
		(*ConstraintTest_Ipv4String)(nil),
		(*ConstraintTest_Ipv6String)(nil),
		(*ConstraintTest_UriString)(nil),
		(*ConstraintTest_UriRefString)(nil),
		(*ConstraintTest_AddressString)(nil),
		(*ConstraintTest_UuidString)(nil),
		(*ConstraintTest_TuuidString)(nil),
		(*ConstraintTest_IpWithPrefixlenString)(nil),
		(*ConstraintTest_Ipv4WithPrefixlenString)(nil),
		(*ConstraintTest_Ipv6WithPrefixlenString)(nil),
		(*ConstraintTest_IpPrefixString)(nil),
		(*ConstraintTest_Ipv4PrefixString)(nil),
		(*ConstraintTest_Ipv6PrefixString)(nil),
		(*ConstraintTest_HostAndPortString)(nil),
		(*ConstraintTest_HttpHeaderNameStrictString)(nil),
		(*ConstraintTest_LenBytes)(nil),
		(*ConstraintTest_MinLenBytes)(nil),
		(*ConstraintTest_MaxLenBytes)(nil),
		(*ConstraintTest_MinMaxLenBytes)(nil),
		(*ConstraintTest_ConstInt32)(nil),
		(*ConstraintTest_LtInt32)(nil),
		(*ConstraintTest_LteInt32)(nil),
		(*ConstraintTest_GtInt32)(nil),
		(*ConstraintTest_GteInt32)(nil),
		(*ConstraintTest_InInt32)(nil),
		(*ConstraintTest_LtGtInt32)(nil),
		(*ConstraintTest_ConstInt64)(nil),
		(*ConstraintTest_LtInt64)(nil),
		(*ConstraintTest_LteInt64)(nil),
		(*ConstraintTest_GtInt64)(nil),
		(*ConstraintTest_GteInt64)(nil),
		(*ConstraintTest_InInt64)(nil),
		(*ConstraintTest_LtGtInt64)(nil),
		(*ConstraintTest_ConstUint32)(nil),
		(*ConstraintTest_LtUint32)(nil),
		(*ConstraintTest_LteUint32)(nil),
		(*ConstraintTest_GtUint32)(nil),
		(*ConstraintTest_GteUint32)(nil),
		(*ConstraintTest_InUint32)(nil),
		(*ConstraintTest_LtGtUint32)(nil),
		(*ConstraintTest_ConstUint64)(nil),
		(*ConstraintTest_LtUint64)(nil),
		(*ConstraintTest_LteUint64)(nil),
		(*ConstraintTest_GtUint64)(nil),
		(*ConstraintTest_GteUint64)(nil),
		(*ConstraintTest_InUint64)(nil),
		(*ConstraintTest_LtGtUint64)(nil),
		(*ConstraintTest_ConstSint32)(nil),
		(*ConstraintTest_LtSint32)(nil),
		(*ConstraintTest_LteSint32)(nil),
		(*ConstraintTest_GtSint32)(nil),
		(*ConstraintTest_GteSint32)(nil),
		(*ConstraintTest_InSint32)(nil),
		(*ConstraintTest_ConstSint64)(nil),
		(*ConstraintTest_LtSint64)(nil),
		(*ConstraintTest_LteSint64)(nil),
		(*ConstraintTest_GtSint64)(nil),
		(*ConstraintTest_GteSint64)(nil),
		(*ConstraintTest_InSint64)(nil),
		(*ConstraintTest_ConstSfixed32)(nil),
		(*ConstraintTest_LtSfixed32)(nil),
		(*ConstraintTest_LteSfixed32)(nil),
		(*ConstraintTest_GtSfixed32)(nil),
		(*ConstraintTest_GteSfixed32)(nil),
		(*ConstraintTest_InSfixed32)(nil),
		(*ConstraintTest_ConstSfixed64)(nil),
		(*ConstraintTest_LtSfixed64)(nil),
		(*ConstraintTest_LteSfixed64)(nil),
		(*ConstraintTest_GtSfixed64)(nil),
		(*ConstraintTest_GteSfixed64)(nil),
		(*ConstraintTest_InSfixed64)(nil),
	}
	file_buf_protoschema_test_v1_constraints_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_buf_protoschema_test_v1_constraints_proto_rawDesc), len(file_buf_protoschema_test_v1_constraints_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_buf_protoschema_test_v1_constraints_proto_goTypes,
		DependencyIndexes: file_buf_protoschema_test_v1_constraints_proto_depIdxs,
		EnumInfos:         file_buf_protoschema_test_v1_constraints_proto_enumTypes,
		MessageInfos:      file_buf_protoschema_test_v1_constraints_proto_msgTypes,
	}.Build()
	File_buf_protoschema_test_v1_constraints_proto = out.File
	file_buf_protoschema_test_v1_constraints_proto_goTypes = nil
	file_buf_protoschema_test_v1_constraints_proto_depIdxs = nil
}
