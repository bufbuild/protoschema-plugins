// Copyright 2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: buf/protoschema/test/v1/constraints.proto

package testv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/bufbuild/protoschema-plugins/internal/gen/proto/bufext/cel/expr/conformance/proto3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConstraintTest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TestCase:
	//
	//	*ConstraintTest_RequiredImplicit_
	//	*ConstraintTest_RequiredOptional_
	//	*ConstraintTest_ConstBool
	//	*ConstraintTest_ConstString
	//	*ConstraintTest_LenString
	//	*ConstraintTest_MinLenString
	//	*ConstraintTest_MaxLenString
	//	*ConstraintTest_MinMaxLenString
	//	*ConstraintTest_InString
	//	*ConstraintTest_PatternString
	//	*ConstraintTest_PrefixString
	//	*ConstraintTest_SuffixString
	//	*ConstraintTest_ContainsString
	//	*ConstraintTest_PrefixSuffixString
	//	*ConstraintTest_PrefixContainsSuffixString
	//	*ConstraintTest_HostnameString
	//	*ConstraintTest_EmailString
	//	*ConstraintTest_IpString
	//	*ConstraintTest_Ipv4String
	//	*ConstraintTest_Ipv6String
	//	*ConstraintTest_UriString
	//	*ConstraintTest_UriRefString
	//	*ConstraintTest_AddressString
	//	*ConstraintTest_UuidString
	//	*ConstraintTest_TuuidString
	//	*ConstraintTest_IpWithPrefixlenString
	//	*ConstraintTest_Ipv4WithPrefixlenString
	//	*ConstraintTest_Ipv6WithPrefixlenString
	//	*ConstraintTest_IpPrefixString
	//	*ConstraintTest_Ipv4PrefixString
	//	*ConstraintTest_Ipv6PrefixString
	//	*ConstraintTest_HostAndPortString
	//	*ConstraintTest_HttpHeaderNameStrictString
	//	*ConstraintTest_LenBytes
	//	*ConstraintTest_MinLenBytes
	//	*ConstraintTest_MaxLenBytes
	//	*ConstraintTest_MinMaxLenBytes
	TestCase      isConstraintTest_TestCase `protobuf_oneof:"test_case"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstraintTest) Reset() {
	*x = ConstraintTest{}
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstraintTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintTest) ProtoMessage() {}

func (x *ConstraintTest) ProtoReflect() protoreflect.Message {
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintTest.ProtoReflect.Descriptor instead.
func (*ConstraintTest) Descriptor() ([]byte, []int) {
	return file_buf_protoschema_test_v1_constraints_proto_rawDescGZIP(), []int{0}
}

func (x *ConstraintTest) GetTestCase() isConstraintTest_TestCase {
	if x != nil {
		return x.TestCase
	}
	return nil
}

func (x *ConstraintTest) GetRequiredImplicit() *ConstraintTest_RequiredImplicit {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_RequiredImplicit_); ok {
			return x.RequiredImplicit
		}
	}
	return nil
}

func (x *ConstraintTest) GetRequiredOptional() *ConstraintTest_RequiredOptional {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_RequiredOptional_); ok {
			return x.RequiredOptional
		}
	}
	return nil
}

func (x *ConstraintTest) GetConstBool() bool {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstBool); ok {
			return x.ConstBool
		}
	}
	return false
}

func (x *ConstraintTest) GetConstString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ConstString); ok {
			return x.ConstString
		}
	}
	return ""
}

func (x *ConstraintTest) GetLenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LenString); ok {
			return x.LenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetMinLenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MinLenString); ok {
			return x.MinLenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetMaxLenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MaxLenString); ok {
			return x.MaxLenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetMinMaxLenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MinMaxLenString); ok {
			return x.MinMaxLenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetInString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_InString); ok {
			return x.InString
		}
	}
	return ""
}

func (x *ConstraintTest) GetPatternString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_PatternString); ok {
			return x.PatternString
		}
	}
	return ""
}

func (x *ConstraintTest) GetPrefixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_PrefixString); ok {
			return x.PrefixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetSuffixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_SuffixString); ok {
			return x.SuffixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetContainsString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_ContainsString); ok {
			return x.ContainsString
		}
	}
	return ""
}

func (x *ConstraintTest) GetPrefixSuffixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_PrefixSuffixString); ok {
			return x.PrefixSuffixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetPrefixContainsSuffixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_PrefixContainsSuffixString); ok {
			return x.PrefixContainsSuffixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetHostnameString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_HostnameString); ok {
			return x.HostnameString
		}
	}
	return ""
}

func (x *ConstraintTest) GetEmailString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_EmailString); ok {
			return x.EmailString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_IpString); ok {
			return x.IpString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv4String() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv4String); ok {
			return x.Ipv4String
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv6String() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv6String); ok {
			return x.Ipv6String
		}
	}
	return ""
}

func (x *ConstraintTest) GetUriString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_UriString); ok {
			return x.UriString
		}
	}
	return ""
}

func (x *ConstraintTest) GetUriRefString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_UriRefString); ok {
			return x.UriRefString
		}
	}
	return ""
}

func (x *ConstraintTest) GetAddressString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_AddressString); ok {
			return x.AddressString
		}
	}
	return ""
}

func (x *ConstraintTest) GetUuidString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_UuidString); ok {
			return x.UuidString
		}
	}
	return ""
}

func (x *ConstraintTest) GetTuuidString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_TuuidString); ok {
			return x.TuuidString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpWithPrefixlenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_IpWithPrefixlenString); ok {
			return x.IpWithPrefixlenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv4WithPrefixlenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv4WithPrefixlenString); ok {
			return x.Ipv4WithPrefixlenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv6WithPrefixlenString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv6WithPrefixlenString); ok {
			return x.Ipv6WithPrefixlenString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpPrefixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_IpPrefixString); ok {
			return x.IpPrefixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv4PrefixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv4PrefixString); ok {
			return x.Ipv4PrefixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetIpv6PrefixString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_Ipv6PrefixString); ok {
			return x.Ipv6PrefixString
		}
	}
	return ""
}

func (x *ConstraintTest) GetHostAndPortString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_HostAndPortString); ok {
			return x.HostAndPortString
		}
	}
	return ""
}

func (x *ConstraintTest) GetHttpHeaderNameStrictString() string {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_HttpHeaderNameStrictString); ok {
			return x.HttpHeaderNameStrictString
		}
	}
	return ""
}

func (x *ConstraintTest) GetLenBytes() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_LenBytes); ok {
			return x.LenBytes
		}
	}
	return nil
}

func (x *ConstraintTest) GetMinLenBytes() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MinLenBytes); ok {
			return x.MinLenBytes
		}
	}
	return nil
}

func (x *ConstraintTest) GetMaxLenBytes() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MaxLenBytes); ok {
			return x.MaxLenBytes
		}
	}
	return nil
}

func (x *ConstraintTest) GetMinMaxLenBytes() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*ConstraintTest_MinMaxLenBytes); ok {
			return x.MinMaxLenBytes
		}
	}
	return nil
}

type isConstraintTest_TestCase interface {
	isConstraintTest_TestCase()
}

type ConstraintTest_RequiredImplicit_ struct {
	RequiredImplicit *ConstraintTest_RequiredImplicit `protobuf:"bytes,1,opt,name=required_implicit,json=requiredImplicit,proto3,oneof"`
}

type ConstraintTest_RequiredOptional_ struct {
	RequiredOptional *ConstraintTest_RequiredOptional `protobuf:"bytes,2,opt,name=required_optional,json=requiredOptional,proto3,oneof"`
}

type ConstraintTest_ConstBool struct {
	ConstBool bool `protobuf:"varint,3,opt,name=const_bool,json=constBool,proto3,oneof"`
}

type ConstraintTest_ConstString struct {
	ConstString string `protobuf:"bytes,4,opt,name=const_string,json=constString,proto3,oneof"`
}

type ConstraintTest_LenString struct {
	LenString string `protobuf:"bytes,5,opt,name=len_string,json=lenString,proto3,oneof"`
}

type ConstraintTest_MinLenString struct {
	MinLenString string `protobuf:"bytes,6,opt,name=min_len_string,json=minLenString,proto3,oneof"`
}

type ConstraintTest_MaxLenString struct {
	MaxLenString string `protobuf:"bytes,7,opt,name=max_len_string,json=maxLenString,proto3,oneof"`
}

type ConstraintTest_MinMaxLenString struct {
	MinMaxLenString string `protobuf:"bytes,8,opt,name=min_max_len_string,json=minMaxLenString,proto3,oneof"`
}

type ConstraintTest_InString struct {
	InString string `protobuf:"bytes,9,opt,name=in_string,json=inString,proto3,oneof"`
}

type ConstraintTest_PatternString struct {
	PatternString string `protobuf:"bytes,10,opt,name=pattern_string,json=patternString,proto3,oneof"`
}

type ConstraintTest_PrefixString struct {
	PrefixString string `protobuf:"bytes,11,opt,name=prefix_string,json=prefixString,proto3,oneof"`
}

type ConstraintTest_SuffixString struct {
	SuffixString string `protobuf:"bytes,12,opt,name=suffix_string,json=suffixString,proto3,oneof"`
}

type ConstraintTest_ContainsString struct {
	ContainsString string `protobuf:"bytes,13,opt,name=contains_string,json=containsString,proto3,oneof"`
}

type ConstraintTest_PrefixSuffixString struct {
	PrefixSuffixString string `protobuf:"bytes,14,opt,name=prefix_suffix_string,json=prefixSuffixString,proto3,oneof"`
}

type ConstraintTest_PrefixContainsSuffixString struct {
	PrefixContainsSuffixString string `protobuf:"bytes,15,opt,name=prefix_contains_suffix_string,json=prefixContainsSuffixString,proto3,oneof"`
}

type ConstraintTest_HostnameString struct {
	HostnameString string `protobuf:"bytes,16,opt,name=hostname_string,json=hostnameString,proto3,oneof"`
}

type ConstraintTest_EmailString struct {
	EmailString string `protobuf:"bytes,17,opt,name=email_string,json=emailString,proto3,oneof"`
}

type ConstraintTest_IpString struct {
	IpString string `protobuf:"bytes,18,opt,name=ip_string,json=ipString,proto3,oneof"`
}

type ConstraintTest_Ipv4String struct {
	Ipv4String string `protobuf:"bytes,19,opt,name=ipv4_string,json=ipv4String,proto3,oneof"`
}

type ConstraintTest_Ipv6String struct {
	Ipv6String string `protobuf:"bytes,20,opt,name=ipv6_string,json=ipv6String,proto3,oneof"`
}

type ConstraintTest_UriString struct {
	UriString string `protobuf:"bytes,21,opt,name=uri_string,json=uriString,proto3,oneof"`
}

type ConstraintTest_UriRefString struct {
	UriRefString string `protobuf:"bytes,22,opt,name=uri_ref_string,json=uriRefString,proto3,oneof"`
}

type ConstraintTest_AddressString struct {
	AddressString string `protobuf:"bytes,23,opt,name=address_string,json=addressString,proto3,oneof"`
}

type ConstraintTest_UuidString struct {
	UuidString string `protobuf:"bytes,24,opt,name=uuid_string,json=uuidString,proto3,oneof"`
}

type ConstraintTest_TuuidString struct {
	TuuidString string `protobuf:"bytes,25,opt,name=tuuid_string,json=tuuidString,proto3,oneof"`
}

type ConstraintTest_IpWithPrefixlenString struct {
	IpWithPrefixlenString string `protobuf:"bytes,26,opt,name=ip_with_prefixlen_string,json=ipWithPrefixlenString,proto3,oneof"`
}

type ConstraintTest_Ipv4WithPrefixlenString struct {
	Ipv4WithPrefixlenString string `protobuf:"bytes,27,opt,name=ipv4_with_prefixlen_string,json=ipv4WithPrefixlenString,proto3,oneof"`
}

type ConstraintTest_Ipv6WithPrefixlenString struct {
	Ipv6WithPrefixlenString string `protobuf:"bytes,28,opt,name=ipv6_with_prefixlen_string,json=ipv6WithPrefixlenString,proto3,oneof"`
}

type ConstraintTest_IpPrefixString struct {
	IpPrefixString string `protobuf:"bytes,29,opt,name=ip_prefix_string,json=ipPrefixString,proto3,oneof"`
}

type ConstraintTest_Ipv4PrefixString struct {
	Ipv4PrefixString string `protobuf:"bytes,30,opt,name=ipv4_prefix_string,json=ipv4PrefixString,proto3,oneof"`
}

type ConstraintTest_Ipv6PrefixString struct {
	Ipv6PrefixString string `protobuf:"bytes,31,opt,name=ipv6_prefix_string,json=ipv6PrefixString,proto3,oneof"`
}

type ConstraintTest_HostAndPortString struct {
	HostAndPortString string `protobuf:"bytes,32,opt,name=host_and_port_string,json=hostAndPortString,proto3,oneof"`
}

type ConstraintTest_HttpHeaderNameStrictString struct {
	HttpHeaderNameStrictString string `protobuf:"bytes,33,opt,name=http_header_name_strict_string,json=httpHeaderNameStrictString,proto3,oneof"`
}

type ConstraintTest_LenBytes struct {
	LenBytes []byte `protobuf:"bytes,34,opt,name=len_bytes,json=lenBytes,proto3,oneof"`
}

type ConstraintTest_MinLenBytes struct {
	MinLenBytes []byte `protobuf:"bytes,35,opt,name=min_len_bytes,json=minLenBytes,proto3,oneof"`
}

type ConstraintTest_MaxLenBytes struct {
	MaxLenBytes []byte `protobuf:"bytes,36,opt,name=max_len_bytes,json=maxLenBytes,proto3,oneof"`
}

type ConstraintTest_MinMaxLenBytes struct {
	MinMaxLenBytes []byte `protobuf:"bytes,37,opt,name=min_max_len_bytes,json=minMaxLenBytes,proto3,oneof"`
}

func (*ConstraintTest_RequiredImplicit_) isConstraintTest_TestCase() {}

func (*ConstraintTest_RequiredOptional_) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstBool) isConstraintTest_TestCase() {}

func (*ConstraintTest_ConstString) isConstraintTest_TestCase() {}

func (*ConstraintTest_LenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_MinLenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_MaxLenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_MinMaxLenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_InString) isConstraintTest_TestCase() {}

func (*ConstraintTest_PatternString) isConstraintTest_TestCase() {}

func (*ConstraintTest_PrefixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_SuffixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_ContainsString) isConstraintTest_TestCase() {}

func (*ConstraintTest_PrefixSuffixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_PrefixContainsSuffixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_HostnameString) isConstraintTest_TestCase() {}

func (*ConstraintTest_EmailString) isConstraintTest_TestCase() {}

func (*ConstraintTest_IpString) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv4String) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv6String) isConstraintTest_TestCase() {}

func (*ConstraintTest_UriString) isConstraintTest_TestCase() {}

func (*ConstraintTest_UriRefString) isConstraintTest_TestCase() {}

func (*ConstraintTest_AddressString) isConstraintTest_TestCase() {}

func (*ConstraintTest_UuidString) isConstraintTest_TestCase() {}

func (*ConstraintTest_TuuidString) isConstraintTest_TestCase() {}

func (*ConstraintTest_IpWithPrefixlenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv4WithPrefixlenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv6WithPrefixlenString) isConstraintTest_TestCase() {}

func (*ConstraintTest_IpPrefixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv4PrefixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_Ipv6PrefixString) isConstraintTest_TestCase() {}

func (*ConstraintTest_HostAndPortString) isConstraintTest_TestCase() {}

func (*ConstraintTest_HttpHeaderNameStrictString) isConstraintTest_TestCase() {}

func (*ConstraintTest_LenBytes) isConstraintTest_TestCase() {}

func (*ConstraintTest_MinLenBytes) isConstraintTest_TestCase() {}

func (*ConstraintTest_MaxLenBytes) isConstraintTest_TestCase() {}

func (*ConstraintTest_MinMaxLenBytes) isConstraintTest_TestCase() {}

type ConstraintTests struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestCases     []*ConstraintTest      `protobuf:"bytes,1,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstraintTests) Reset() {
	*x = ConstraintTests{}
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstraintTests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintTests) ProtoMessage() {}

func (x *ConstraintTests) ProtoReflect() protoreflect.Message {
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintTests.ProtoReflect.Descriptor instead.
func (*ConstraintTests) Descriptor() ([]byte, []int) {
	return file_buf_protoschema_test_v1_constraints_proto_rawDescGZIP(), []int{1}
}

func (x *ConstraintTests) GetTestCases() []*ConstraintTest {
	if x != nil {
		return x.TestCases
	}
	return nil
}

type ConstraintTest_RequiredImplicit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BoolValue     bool                   `protobuf:"varint,1,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue   string                 `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstraintTest_RequiredImplicit) Reset() {
	*x = ConstraintTest_RequiredImplicit{}
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstraintTest_RequiredImplicit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintTest_RequiredImplicit) ProtoMessage() {}

func (x *ConstraintTest_RequiredImplicit) ProtoReflect() protoreflect.Message {
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintTest_RequiredImplicit.ProtoReflect.Descriptor instead.
func (*ConstraintTest_RequiredImplicit) Descriptor() ([]byte, []int) {
	return file_buf_protoschema_test_v1_constraints_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConstraintTest_RequiredImplicit) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *ConstraintTest_RequiredImplicit) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

type ConstraintTest_RequiredOptional struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BoolValue     *bool                  `protobuf:"varint,1,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
	StringValue   *string                `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstraintTest_RequiredOptional) Reset() {
	*x = ConstraintTest_RequiredOptional{}
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstraintTest_RequiredOptional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintTest_RequiredOptional) ProtoMessage() {}

func (x *ConstraintTest_RequiredOptional) ProtoReflect() protoreflect.Message {
	mi := &file_buf_protoschema_test_v1_constraints_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintTest_RequiredOptional.ProtoReflect.Descriptor instead.
func (*ConstraintTest_RequiredOptional) Descriptor() ([]byte, []int) {
	return file_buf_protoschema_test_v1_constraints_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ConstraintTest_RequiredOptional) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *ConstraintTest_RequiredOptional) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

var File_buf_protoschema_test_v1_constraints_proto protoreflect.FileDescriptor

var file_buf_protoschema_test_v1_constraints_proto_rawDesc = []byte{
	0x0a, 0x29, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x37, 0x62, 0x75, 0x66, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x65, 0x6c, 0x2f, 0x65, 0x78,
	0x70, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x12, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x67, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x07, 0xba, 0x48, 0x04, 0x6a, 0x02, 0x08, 0x00, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xba, 0x48, 0x09, 0x72, 0x07, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x0a,
	0x6c, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x98, 0x01, 0x05, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x65,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4c,
	0x65, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x4c, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x12, 0x6d, 0x69, 0x6e,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x05, 0x18, 0x0a,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x52, 0x03, 0x69,
	0x6e, 0x31, 0x52, 0x03, 0x69, 0x6e, 0x32, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x0d,
	0x72, 0x0b, 0x32, 0x09, 0x5e, 0x70, 0x61, 0x74, 0x2a, 0x65, 0x72, 0x6e, 0x24, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x72, 0x09, 0x3a, 0x07, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x0d, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xba, 0x48,
	0x0b, 0x72, 0x09, 0x42, 0x07, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x0e, 0x72, 0x0c, 0x4a, 0x0a, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x14, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba, 0x48, 0x14, 0x72, 0x12, 0x3a,
	0x07, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x42, 0x07, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x66, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0xba, 0x48, 0x1e, 0x72, 0x1c, 0x3a, 0x07, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x42, 0x07,
	0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x48, 0x00, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x32, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x68,
	0x01, 0x48, 0x00, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x60, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x26, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x70, 0x01, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x0b, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x78, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0x80, 0x01, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x29, 0x0a, 0x0a, 0x75, 0x72, 0x69, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01,
	0x48, 0x00, 0x52, 0x09, 0x75, 0x72, 0x69, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a,
	0x0e, 0x75, 0x72, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x48,
	0x00, 0x52, 0x0c, 0x75, 0x72, 0x69, 0x52, 0x65, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x31, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xa8, 0x01,
	0x01, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x0b, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x75, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x2d, 0x0a, 0x0c, 0x74, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x02, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x75, 0x75, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x43,
	0x0a, 0x18, 0x69, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x6c, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xd0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x15, 0x69, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x6c, 0x65, 0x6e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x1a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x6c, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xd8, 0x01,
	0x01, 0x48, 0x00, 0x52, 0x17, 0x69, 0x70, 0x76, 0x34, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x6c, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x1a,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x6c, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xe0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x17, 0x69, 0x70,
	0x76, 0x36, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x6c, 0x65, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xe8, 0x01, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x70, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x12, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xf0, 0x01,
	0x01, 0x48, 0x00, 0x52, 0x10, 0x69, 0x70, 0x76, 0x34, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xf8, 0x01, 0x01, 0x48, 0x00, 0x52, 0x10, 0x69,
	0x70, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x3b, 0x0a, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0x80, 0x02, 0x01, 0x48, 0x00, 0x52, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x41,
	0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x1e,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x72, 0x06, 0xc8, 0x01, 0x01, 0xc0, 0x01,
	0x01, 0x48, 0x00, 0x52, 0x1a, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x26, 0x0a, 0x09, 0x6c, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x07, 0xba, 0x48, 0x04, 0x7a, 0x02, 0x68, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6c,
	0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x6c,
	0x65, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x7a, 0x02, 0x10, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x4c, 0x65,
	0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65,
	0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x7a, 0x02, 0x18, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x09, 0xba, 0x48, 0x06, 0x7a, 0x04, 0x10, 0x05, 0x18, 0x0a, 0x48, 0x00, 0x52, 0x0e, 0x6d,
	0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x64, 0x0a,
	0x10, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x12, 0x25, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x8e, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73,
	0x65, 0x22, 0x59, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x42, 0x89, 0x02, 0x0a,
	0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x66,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x75, 0x66,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x42, 0x50,
	0x54, 0xaa, 0x02, 0x17, 0x42, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x17, 0x42, 0x75,
	0x66, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5c, 0x54, 0x65,
	0x73, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x23, 0x42, 0x75, 0x66, 0x5c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5c, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x42, 0x75,
	0x66, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x3a, 0x3a,
	0x54, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_buf_protoschema_test_v1_constraints_proto_rawDescOnce sync.Once
	file_buf_protoschema_test_v1_constraints_proto_rawDescData = file_buf_protoschema_test_v1_constraints_proto_rawDesc
)

func file_buf_protoschema_test_v1_constraints_proto_rawDescGZIP() []byte {
	file_buf_protoschema_test_v1_constraints_proto_rawDescOnce.Do(func() {
		file_buf_protoschema_test_v1_constraints_proto_rawDescData = protoimpl.X.CompressGZIP(file_buf_protoschema_test_v1_constraints_proto_rawDescData)
	})
	return file_buf_protoschema_test_v1_constraints_proto_rawDescData
}

var file_buf_protoschema_test_v1_constraints_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_buf_protoschema_test_v1_constraints_proto_goTypes = []any{
	(*ConstraintTest)(nil),                  // 0: buf.protoschema.test.v1.ConstraintTest
	(*ConstraintTests)(nil),                 // 1: buf.protoschema.test.v1.ConstraintTests
	(*ConstraintTest_RequiredImplicit)(nil), // 2: buf.protoschema.test.v1.ConstraintTest.RequiredImplicit
	(*ConstraintTest_RequiredOptional)(nil), // 3: buf.protoschema.test.v1.ConstraintTest.RequiredOptional
}
var file_buf_protoschema_test_v1_constraints_proto_depIdxs = []int32{
	2, // 0: buf.protoschema.test.v1.ConstraintTest.required_implicit:type_name -> buf.protoschema.test.v1.ConstraintTest.RequiredImplicit
	3, // 1: buf.protoschema.test.v1.ConstraintTest.required_optional:type_name -> buf.protoschema.test.v1.ConstraintTest.RequiredOptional
	0, // 2: buf.protoschema.test.v1.ConstraintTests.test_cases:type_name -> buf.protoschema.test.v1.ConstraintTest
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_buf_protoschema_test_v1_constraints_proto_init() }
func file_buf_protoschema_test_v1_constraints_proto_init() {
	if File_buf_protoschema_test_v1_constraints_proto != nil {
		return
	}
	file_buf_protoschema_test_v1_constraints_proto_msgTypes[0].OneofWrappers = []any{
		(*ConstraintTest_RequiredImplicit_)(nil),
		(*ConstraintTest_RequiredOptional_)(nil),
		(*ConstraintTest_ConstBool)(nil),
		(*ConstraintTest_ConstString)(nil),
		(*ConstraintTest_LenString)(nil),
		(*ConstraintTest_MinLenString)(nil),
		(*ConstraintTest_MaxLenString)(nil),
		(*ConstraintTest_MinMaxLenString)(nil),
		(*ConstraintTest_InString)(nil),
		(*ConstraintTest_PatternString)(nil),
		(*ConstraintTest_PrefixString)(nil),
		(*ConstraintTest_SuffixString)(nil),
		(*ConstraintTest_ContainsString)(nil),
		(*ConstraintTest_PrefixSuffixString)(nil),
		(*ConstraintTest_PrefixContainsSuffixString)(nil),
		(*ConstraintTest_HostnameString)(nil),
		(*ConstraintTest_EmailString)(nil),
		(*ConstraintTest_IpString)(nil),
		(*ConstraintTest_Ipv4String)(nil),
		(*ConstraintTest_Ipv6String)(nil),
		(*ConstraintTest_UriString)(nil),
		(*ConstraintTest_UriRefString)(nil),
		(*ConstraintTest_AddressString)(nil),
		(*ConstraintTest_UuidString)(nil),
		(*ConstraintTest_TuuidString)(nil),
		(*ConstraintTest_IpWithPrefixlenString)(nil),
		(*ConstraintTest_Ipv4WithPrefixlenString)(nil),
		(*ConstraintTest_Ipv6WithPrefixlenString)(nil),
		(*ConstraintTest_IpPrefixString)(nil),
		(*ConstraintTest_Ipv4PrefixString)(nil),
		(*ConstraintTest_Ipv6PrefixString)(nil),
		(*ConstraintTest_HostAndPortString)(nil),
		(*ConstraintTest_HttpHeaderNameStrictString)(nil),
		(*ConstraintTest_LenBytes)(nil),
		(*ConstraintTest_MinLenBytes)(nil),
		(*ConstraintTest_MaxLenBytes)(nil),
		(*ConstraintTest_MinMaxLenBytes)(nil),
	}
	file_buf_protoschema_test_v1_constraints_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_buf_protoschema_test_v1_constraints_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_buf_protoschema_test_v1_constraints_proto_goTypes,
		DependencyIndexes: file_buf_protoschema_test_v1_constraints_proto_depIdxs,
		MessageInfos:      file_buf_protoschema_test_v1_constraints_proto_msgTypes,
	}.Build()
	File_buf_protoschema_test_v1_constraints_proto = out.File
	file_buf_protoschema_test_v1_constraints_proto_rawDesc = nil
	file_buf_protoschema_test_v1_constraints_proto_goTypes = nil
	file_buf_protoschema_test_v1_constraints_proto_depIdxs = nil
}
