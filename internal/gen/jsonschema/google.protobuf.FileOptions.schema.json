{
  "$id": "google.protobuf.FileOptions.schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "additionalProperties": true,
  "patternProperties": {
    "^(ccEnableArenas)$": {
      "description": "Enables the use of arenas for the proto messages in this file. This applies\n only to generated classes for C++.",
      "type": "boolean"
    },
    "^(ccGenericServices)$": {
      "description": "Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.",
      "title": "Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of google.protobuf.",
      "type": "boolean"
    },
    "^(csharpNamespace)$": {
      "description": "Namespace for generated classes; defaults to the package.",
      "type": "string"
    },
    "^(goPackage)$": {
      "description": "Sets the Go package where structs generated from this .proto will be\n placed. If omitted, the Go package will be derived from the following:\n   - The basename of the package import path, if provided.\n   - Otherwise, the package statement in the .proto file, if present.\n   - Otherwise, the basename of the .proto file, without extension.",
      "type": "string"
    },
    "^(javaGenerateEqualsAndHash)$": {
      "description": "This option does nothing.",
      "type": "boolean"
    },
    "^(javaGenericServices)$": {
      "type": "boolean"
    },
    "^(javaMultipleFiles)$": {
      "description": "If enabled, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the wrapper class\n named by java_outer_classname.  However, the wrapper class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.",
      "type": "boolean"
    },
    "^(javaOuterClassname)$": {
      "description": "Controls the name of the wrapper Java class generated for the .proto file.\n That class will always contain the .proto file's getDescriptor() method as\n well as any top-level extensions defined in the .proto file.\n If java_multiple_files is disabled, then all the other classes from the\n .proto file will be nested inside the single wrapper outer class.",
      "type": "string"
    },
    "^(javaPackage)$": {
      "description": "Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.",
      "type": "string"
    },
    "^(javaStringCheckUtf8)$": {
      "description": "TODO: clarify exactly what kinds of field types this option\n applies to, and update these docs accordingly.\n\n Proto3 files already perform these checks. Setting the option explicitly to\n false has no effect: it cannot be used to opt proto3 files out of UTF-8\n checks.",
      "title": "A proto2 file can set this to true to opt in to UTF-8 checking for Java,\n which will throw an exception if invalid UTF-8 is parsed from the wire or\n assigned to a string field.",
      "type": "boolean"
    },
    "^(objcClassPrefix)$": {
      "description": "Sets the objective c class prefix which is prepended to all objective c\n generated classes from this .proto. There is no default.",
      "type": "string"
    },
    "^(optimizeFor)$": {
      "anyOf": [
        {
          "enum": [
            "SPEED",
            "CODE_SIZE",
            "LITE_RUNTIME"
          ],
          "type": "string"
        },
        {
          "maximum": 2147483647,
          "minimum": -2147483648,
          "type": "integer"
        }
      ],
      "title": "Optimize Mode"
    },
    "^(phpClassPrefix)$": {
      "description": "Sets the php class prefix which is prepended to all php generated classes\n from this .proto. Default is empty.",
      "type": "string"
    },
    "^(phpMetadataNamespace)$": {
      "description": "Use this option to change the namespace of php generated metadata classes.\n Default is empty. When this option is empty, the proto file name will be\n used for determining the namespace.",
      "type": "string"
    },
    "^(phpNamespace)$": {
      "description": "Use this option to change the namespace of php generated classes. Default\n is empty. When this option is empty, the package name will be used for\n determining the namespace.",
      "type": "string"
    },
    "^(pyGenericServices)$": {
      "type": "boolean"
    },
    "^(rubyPackage)$": {
      "description": "Use this option to change the package of ruby generated classes. Default\n is empty. When this option is not set, the package name will be used for\n determining the ruby package.",
      "type": "string"
    },
    "^(swiftPrefix)$": {
      "description": "By default Swift generators will take the proto package and CamelCase it\n replacing '.' with underscore and use that to prefix the types/symbols\n defined. When this options is provided, they will use this value instead\n to prefix the types/symbols defined.",
      "type": "string"
    },
    "^(uninterpretedOption)$": {
      "description": "The parser stores options it doesn't recognize here.\n See the documentation for the \"Options\" section above.",
      "items": {
        "$ref": "google.protobuf.UninterpretedOption.schema.json"
      },
      "type": "array"
    }
  },
  "properties": {
    "cc_enable_arenas": {
      "description": "Enables the use of arenas for the proto messages in this file. This applies\n only to generated classes for C++.",
      "type": "boolean"
    },
    "cc_generic_services": {
      "description": "Generic services are now considered deprecated in favor of using plugins\n that generate code specific to your particular RPC system.  Therefore,\n these default to false.  Old code which depends on generic services should\n explicitly set them to true.",
      "title": "Should generic services be generated in each language?  \"Generic\" services\n are not specific to any particular RPC system.  They are generated by the\n main code generators in each language (without additional plugins).\n Generic services were the only kind of service generation supported by\n early versions of google.protobuf.",
      "type": "boolean"
    },
    "csharp_namespace": {
      "description": "Namespace for generated classes; defaults to the package.",
      "type": "string"
    },
    "deprecated": {
      "description": "Is this file deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for everything in the file, or it will be completely ignored; in the very\n least, this is a formalization for deprecating files.",
      "type": "boolean"
    },
    "features": {
      "$ref": "google.protobuf.FeatureSet.schema.json",
      "description": "Any features defined in the specific edition.\n WARNING: This field should only be used by protobuf plugins or special\n cases like the proto compiler. Other uses are discouraged and\n developers should rely on the protoreflect APIs for their client language."
    },
    "go_package": {
      "description": "Sets the Go package where structs generated from this .proto will be\n placed. If omitted, the Go package will be derived from the following:\n   - The basename of the package import path, if provided.\n   - Otherwise, the package statement in the .proto file, if present.\n   - Otherwise, the basename of the .proto file, without extension.",
      "type": "string"
    },
    "java_generate_equals_and_hash": {
      "description": "This option does nothing.",
      "type": "boolean"
    },
    "java_generic_services": {
      "type": "boolean"
    },
    "java_multiple_files": {
      "description": "If enabled, then the Java code generator will generate a separate .java\n file for each top-level message, enum, and service defined in the .proto\n file.  Thus, these types will *not* be nested inside the wrapper class\n named by java_outer_classname.  However, the wrapper class will still be\n generated to contain the file's getDescriptor() method as well as any\n top-level extensions defined in the file.",
      "type": "boolean"
    },
    "java_outer_classname": {
      "description": "Controls the name of the wrapper Java class generated for the .proto file.\n That class will always contain the .proto file's getDescriptor() method as\n well as any top-level extensions defined in the .proto file.\n If java_multiple_files is disabled, then all the other classes from the\n .proto file will be nested inside the single wrapper outer class.",
      "type": "string"
    },
    "java_package": {
      "description": "Sets the Java package where classes generated from this .proto will be\n placed.  By default, the proto package is used, but this is often\n inappropriate because proto packages do not normally start with backwards\n domain names.",
      "type": "string"
    },
    "java_string_check_utf8": {
      "description": "TODO: clarify exactly what kinds of field types this option\n applies to, and update these docs accordingly.\n\n Proto3 files already perform these checks. Setting the option explicitly to\n false has no effect: it cannot be used to opt proto3 files out of UTF-8\n checks.",
      "title": "A proto2 file can set this to true to opt in to UTF-8 checking for Java,\n which will throw an exception if invalid UTF-8 is parsed from the wire or\n assigned to a string field.",
      "type": "boolean"
    },
    "objc_class_prefix": {
      "description": "Sets the objective c class prefix which is prepended to all objective c\n generated classes from this .proto. There is no default.",
      "type": "string"
    },
    "optimize_for": {
      "anyOf": [
        {
          "enum": [
            "SPEED",
            "CODE_SIZE",
            "LITE_RUNTIME"
          ],
          "type": "string"
        },
        {
          "maximum": 2147483647,
          "minimum": -2147483648,
          "type": "integer"
        }
      ],
      "title": "Optimize Mode"
    },
    "php_class_prefix": {
      "description": "Sets the php class prefix which is prepended to all php generated classes\n from this .proto. Default is empty.",
      "type": "string"
    },
    "php_metadata_namespace": {
      "description": "Use this option to change the namespace of php generated metadata classes.\n Default is empty. When this option is empty, the proto file name will be\n used for determining the namespace.",
      "type": "string"
    },
    "php_namespace": {
      "description": "Use this option to change the namespace of php generated classes. Default\n is empty. When this option is empty, the package name will be used for\n determining the namespace.",
      "type": "string"
    },
    "py_generic_services": {
      "type": "boolean"
    },
    "ruby_package": {
      "description": "Use this option to change the package of ruby generated classes. Default\n is empty. When this option is not set, the package name will be used for\n determining the ruby package.",
      "type": "string"
    },
    "swift_prefix": {
      "description": "By default Swift generators will take the proto package and CamelCase it\n replacing '.' with underscore and use that to prefix the types/symbols\n defined. When this options is provided, they will use this value instead\n to prefix the types/symbols defined.",
      "type": "string"
    },
    "uninterpreted_option": {
      "description": "The parser stores options it doesn't recognize here.\n See the documentation for the \"Options\" section above.",
      "items": {
        "$ref": "google.protobuf.UninterpretedOption.schema.json"
      },
      "type": "array"
    }
  },
  "title": "File Options",
  "type": "object"
}
