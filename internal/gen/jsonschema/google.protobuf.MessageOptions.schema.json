{
  "$id": "google.protobuf.MessageOptions.schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "additionalProperties": true,
  "patternProperties": {
    "^(deprecatedLegacyJsonFieldConflicts)$": {
      "description": "This should only be used as a temporary measure against broken builds due\n to the change in behavior for JSON field name conflicts.\n\n TODO This is legacy behavior we plan to remove once downstream\n teams have had time to migrate.",
      "title": "Enable the legacy handling of JSON field name conflicts.  This lowercases\n and strips underscored from the fields before comparison in proto3 only.\n The new behavior takes `json_name` into account and applies to proto2 as\n well.",
      "type": "boolean"
    },
    "^(mapEntry)$": {
      "description": "For maps fields:\n     map\u003cKeyType, ValueType\u003e map_field = 1;\n The parsed descriptor looks like:\n     message MapFieldEntry {\n         option map_entry = true;\n         optional KeyType key = 1;\n         optional ValueType value = 2;\n     }\n     repeated MapFieldEntry map_field = 1;\n\n Implementations may choose not to generate the map_entry=true message, but\n use a native map in the target language to hold the keys and values.\n The reflection APIs in such implementations still need to work as\n if the field is a repeated message field.\n\n NOTE: Do not set the option in .proto files. Always use the maps syntax\n instead. The option should only be implicitly set by the proto compiler\n parser.",
      "title": "Whether the message is an automatically generated map entry type for the\n maps field.",
      "type": "boolean"
    },
    "^(messageSetWireFormat)$": {
      "description": "The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.",
      "title": "Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.",
      "type": "boolean"
    },
    "^(noStandardDescriptorAccessor)$": {
      "description": "Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".",
      "type": "boolean"
    },
    "^(uninterpretedOption)$": {
      "description": "The parser stores options it doesn't recognize here. See above.",
      "items": {
        "$ref": "google.protobuf.UninterpretedOption.schema.json"
      },
      "type": "array"
    }
  },
  "properties": {
    "deprecated": {
      "description": "Is this message deprecated?\n Depending on the target platform, this can emit Deprecated annotations\n for the message, or it will be completely ignored; in the very least,\n this is a formalization for deprecating messages.",
      "type": "boolean"
    },
    "deprecated_legacy_json_field_conflicts": {
      "description": "This should only be used as a temporary measure against broken builds due\n to the change in behavior for JSON field name conflicts.\n\n TODO This is legacy behavior we plan to remove once downstream\n teams have had time to migrate.",
      "title": "Enable the legacy handling of JSON field name conflicts.  This lowercases\n and strips underscored from the fields before comparison in proto3 only.\n The new behavior takes `json_name` into account and applies to proto2 as\n well.",
      "type": "boolean"
    },
    "features": {
      "$ref": "google.protobuf.FeatureSet.schema.json",
      "description": "Any features defined in the specific edition.\n WARNING: This field should only be used by protobuf plugins or special\n cases like the proto compiler. Other uses are discouraged and\n developers should rely on the protoreflect APIs for their client language."
    },
    "map_entry": {
      "description": "For maps fields:\n     map\u003cKeyType, ValueType\u003e map_field = 1;\n The parsed descriptor looks like:\n     message MapFieldEntry {\n         option map_entry = true;\n         optional KeyType key = 1;\n         optional ValueType value = 2;\n     }\n     repeated MapFieldEntry map_field = 1;\n\n Implementations may choose not to generate the map_entry=true message, but\n use a native map in the target language to hold the keys and values.\n The reflection APIs in such implementations still need to work as\n if the field is a repeated message field.\n\n NOTE: Do not set the option in .proto files. Always use the maps syntax\n instead. The option should only be implicitly set by the proto compiler\n parser.",
      "title": "Whether the message is an automatically generated map entry type for the\n maps field.",
      "type": "boolean"
    },
    "message_set_wire_format": {
      "description": "The message must be defined exactly as follows:\n   message Foo {\n     option message_set_wire_format = true;\n     extensions 4 to max;\n   }\n Note that the message cannot have any defined fields; MessageSets only\n have extensions.\n\n All extensions of your type must be singular messages; e.g. they cannot\n be int32s, enums, or repeated messages.\n\n Because this is an option, the above two restrictions are not enforced by\n the protocol compiler.",
      "title": "Set true to use the old proto1 MessageSet wire format for extensions.\n This is provided for backwards-compatibility with the MessageSet wire\n format.  You should not use this for any other reason:  It's less\n efficient, has fewer features, and is more complicated.",
      "type": "boolean"
    },
    "no_standard_descriptor_accessor": {
      "description": "Disables the generation of the standard \"descriptor()\" accessor, which can\n conflict with a field of the same name.  This is meant to make migration\n from proto1 easier; new code should avoid fields named \"descriptor\".",
      "type": "boolean"
    },
    "uninterpreted_option": {
      "description": "The parser stores options it doesn't recognize here. See above.",
      "items": {
        "$ref": "google.protobuf.UninterpretedOption.schema.json"
      },
      "type": "array"
    }
  },
  "title": "Message Options",
  "type": "object"
}
