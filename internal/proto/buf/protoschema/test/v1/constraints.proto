// Copyright 2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package buf.protoschema.test.v1;

import "buf/validate/validate.proto";
import "bufext/cel/expr/conformance/proto3/test_all_types.proto";

message ConstraintTest {
  message RequiredImplicit {
    bool bool_value = 1 [(buf.validate.field).required = true];
    string string_value = 2 [(buf.validate.field).required = true];
  }

  message RequiredOptional {
    optional bool bool_value = 1 [(buf.validate.field).required = true];
    optional string string_value = 2 [(buf.validate.field).required = true];
  }

  oneof test_case {
    RequiredImplicit required_implicit = 1;
    RequiredOptional required_optional = 2;
    bool const_bool = 3 [(buf.validate.field).bool.const = false];
    string const_string = 4 [(buf.validate.field).string.const = "const"];
    string len_string = 5 [(buf.validate.field).string.len = 5];
    string min_len_string = 6 [(buf.validate.field).string.min_len = 5];
    string max_len_string = 7 [(buf.validate.field).string.max_len = 5];
    string min_max_len_string = 8 [(buf.validate.field).string = {
      min_len: 5
      max_len: 10
    }];
    string in_string = 9 [(buf.validate.field).string = {
      in: [
        "in1",
        "in2"
      ]
    }];
    string pattern_string = 10 [(buf.validate.field).string.pattern = "^pat*ern$"];
    string prefix_string = 11 [(buf.validate.field).string.prefix = "prefix_"];
    string suffix_string = 12 [(buf.validate.field).string.suffix = "_suffix"];
    string contains_string = 13 [(buf.validate.field).string.contains = "_contains_"];
    string prefix_suffix_string = 14 [(buf.validate.field).string = {
      suffix: "_suffix"
      prefix: "prefix_"
    }];
    string prefix_contains_suffix_string = 15 [(buf.validate.field).string = {
      suffix: "_suffix"
      prefix: "prefix_"
      contains: "contains"
    }];
    string hostname_string = 16 [(buf.validate.field).string.hostname = true];
    string email_string = 17 [(buf.validate.field).string.email = true];
    string ip_string = 18 [(buf.validate.field).string.ip = true];
    string ipv4_string = 19 [(buf.validate.field).string.ipv4 = true];
    string ipv6_string = 20 [(buf.validate.field).string.ipv6 = true];
    string uri_string = 21 [(buf.validate.field).string.uri = true];
    string uri_ref_string = 22 [(buf.validate.field).string.uri_ref = true];
    string address_string = 23 [(buf.validate.field).string.address = true];
    string uuid_string = 24 [(buf.validate.field).string.uuid = true];
    string tuuid_string = 25 [(buf.validate.field).string.tuuid = true];
    string ip_with_prefixlen_string = 26 [(buf.validate.field).string.ip_with_prefixlen = true];
    string ipv4_with_prefixlen_string = 27 [(buf.validate.field).string.ipv4_with_prefixlen = true];
    string ipv6_with_prefixlen_string = 28 [(buf.validate.field).string.ipv6_with_prefixlen = true];
    string ip_prefix_string = 29 [(buf.validate.field).string.ip_prefix = true];
    string ipv4_prefix_string = 30 [(buf.validate.field).string.ipv4_prefix = true];
    string ipv6_prefix_string = 31 [(buf.validate.field).string.ipv6_prefix = true];
    string host_and_port_string = 32 [(buf.validate.field).string.host_and_port = true];
    string http_header_name_strict_string = 33 [(buf.validate.field).string = {
      well_known_regex: KNOWN_REGEX_HTTP_HEADER_NAME
      strict: true
    }];
    bytes len_bytes = 34 [(buf.validate.field).bytes.len = 5];
    bytes min_len_bytes = 35 [(buf.validate.field).bytes.min_len = 5];
    bytes max_len_bytes = 36 [(buf.validate.field).bytes.max_len = 5];
    bytes min_max_len_bytes = 37 [(buf.validate.field).bytes = {
      min_len: 5
      max_len: 10
    }];
  }
}

message ConstraintTests {
  repeated ConstraintTest test_cases = 1;
}
